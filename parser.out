Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> DECLARE declarations BEGIN commands END
Rule 2     program -> BEGIN commands END
Rule 3     declarations -> declarations COMMA pidentifier
Rule 4     declarations -> declarations COMMA pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET
Rule 5     declarations -> pidentifier
Rule 6     declarations -> pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET
Rule 7     commands -> commands command
Rule 8     commands -> command
Rule 9     command -> READ identifier SEMICOLON
Rule 10    command -> identifier ASSIGNMENT expression SEMICOLON
Rule 11    command -> WHILE condition DO commands ENDWHILE
Rule 12    command -> REPEAT commands UNTIL condition SEMICOLON
Rule 13    command -> FOR pidentifier FROM value TO value DO commands ENDFOR
Rule 14    command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
Rule 15    command -> IF condition THEN commands ELSE commands ENDIF
Rule 16    command -> IF condition THEN commands ENDIF
Rule 17    command -> WRITE value SEMICOLON
Rule 18    expression -> value
Rule 19    expression -> value ADD value
Rule 20    expression -> value SUB value
Rule 21    expression -> value MUL value
Rule 22    expression -> value DIV value
Rule 23    expression -> value MOD value
Rule 24    condition -> value EQUALS value
Rule 25    condition -> value NOT_EQUALS value
Rule 26    condition -> value LOWER value
Rule 27    condition -> value GREATER value
Rule 28    condition -> value LEQ value
Rule 29    condition -> value GEQ value
Rule 30    value -> NUM
Rule 31    value -> identifier
Rule 32    identifier -> pidentifier
Rule 33    identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
Rule 34    identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

Terminals, with rules where they appear

ADD                  : 19
ASSIGNMENT           : 10
BEGIN                : 1 2
COLON                : 4 6
COMMA                : 3 4
DECLARE              : 1
DIV                  : 22
DO                   : 11 13 14
DOWNTO               : 14
ELSE                 : 15
END                  : 1 2
ENDFOR               : 13 14
ENDIF                : 15 16
ENDWHILE             : 11
EQUALS               : 24
FOR                  : 13 14
FROM                 : 13 14
GEQ                  : 29
GREATER              : 27
IF                   : 15 16
LEFT_BRACKET         : 4 6 33 34
LEQ                  : 28
LOWER                : 26
MOD                  : 23
MUL                  : 21
NOT_EQUALS           : 25
NUM                  : 4 4 6 6 30 34
READ                 : 9
REPEAT               : 12
RIGHT_BRACKET        : 4 6 33 34
SEMICOLON            : 9 10 12 17
SUB                  : 20
THEN                 : 15 16
TO                   : 13
UNTIL                : 12
WHILE                : 11
WRITE                : 17
error                : 
pidentifier          : 3 4 5 6 13 14 32 33 33 34

Nonterminals, with rules where they appear

command              : 7 8
commands             : 1 2 7 11 12 13 14 15 15 16
condition            : 11 12 15 16
declarations         : 1 3 4
expression           : 10
identifier           : 9 10 31
program              : 0
value                : 13 13 14 14 17 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . DECLARE declarations BEGIN commands END
    (2) program -> . BEGIN commands END

    DECLARE         shift and go to state 2
    BEGIN           shift and go to state 3

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> DECLARE . declarations BEGIN commands END
    (3) declarations -> . declarations COMMA pidentifier
    (4) declarations -> . declarations COMMA pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET
    (5) declarations -> . pidentifier
    (6) declarations -> . pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET

    pidentifier     shift and go to state 5

    declarations                   shift and go to state 4

state 3

    (2) program -> BEGIN . commands END
    (7) commands -> . commands command
    (8) commands -> . command
    (9) command -> . READ identifier SEMICOLON
    (10) command -> . identifier ASSIGNMENT expression SEMICOLON
    (11) command -> . WHILE condition DO commands ENDWHILE
    (12) command -> . REPEAT commands UNTIL condition SEMICOLON
    (13) command -> . FOR pidentifier FROM value TO value DO commands ENDFOR
    (14) command -> . FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . IF condition THEN commands ELSE commands ENDIF
    (16) command -> . IF condition THEN commands ENDIF
    (17) command -> . WRITE value SEMICOLON
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    READ            shift and go to state 8
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 14
    WRITE           shift and go to state 15
    pidentifier     shift and go to state 13

    commands                       shift and go to state 6
    command                        shift and go to state 7
    identifier                     shift and go to state 9

state 4

    (1) program -> DECLARE declarations . BEGIN commands END
    (3) declarations -> declarations . COMMA pidentifier
    (4) declarations -> declarations . COMMA pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET

    BEGIN           shift and go to state 16
    COMMA           shift and go to state 17


state 5

    (5) declarations -> pidentifier .
    (6) declarations -> pidentifier . LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET

    BEGIN           reduce using rule 5 (declarations -> pidentifier .)
    COMMA           reduce using rule 5 (declarations -> pidentifier .)
    LEFT_BRACKET    shift and go to state 18


state 6

    (2) program -> BEGIN commands . END
    (7) commands -> commands . command
    (9) command -> . READ identifier SEMICOLON
    (10) command -> . identifier ASSIGNMENT expression SEMICOLON
    (11) command -> . WHILE condition DO commands ENDWHILE
    (12) command -> . REPEAT commands UNTIL condition SEMICOLON
    (13) command -> . FOR pidentifier FROM value TO value DO commands ENDFOR
    (14) command -> . FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . IF condition THEN commands ELSE commands ENDIF
    (16) command -> . IF condition THEN commands ENDIF
    (17) command -> . WRITE value SEMICOLON
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    END             shift and go to state 19
    READ            shift and go to state 8
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 14
    WRITE           shift and go to state 15
    pidentifier     shift and go to state 13

    command                        shift and go to state 20
    identifier                     shift and go to state 9

state 7

    (8) commands -> command .

    END             reduce using rule 8 (commands -> command .)
    READ            reduce using rule 8 (commands -> command .)
    WHILE           reduce using rule 8 (commands -> command .)
    REPEAT          reduce using rule 8 (commands -> command .)
    FOR             reduce using rule 8 (commands -> command .)
    IF              reduce using rule 8 (commands -> command .)
    WRITE           reduce using rule 8 (commands -> command .)
    pidentifier     reduce using rule 8 (commands -> command .)
    UNTIL           reduce using rule 8 (commands -> command .)
    ENDWHILE        reduce using rule 8 (commands -> command .)
    ELSE            reduce using rule 8 (commands -> command .)
    ENDIF           reduce using rule 8 (commands -> command .)
    ENDFOR          reduce using rule 8 (commands -> command .)


state 8

    (9) command -> READ . identifier SEMICOLON
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    pidentifier     shift and go to state 13

    identifier                     shift and go to state 21

state 9

    (10) command -> identifier . ASSIGNMENT expression SEMICOLON

    ASSIGNMENT      shift and go to state 22


state 10

    (11) command -> WHILE . condition DO commands ENDWHILE
    (24) condition -> . value EQUALS value
    (25) condition -> . value NOT_EQUALS value
    (26) condition -> . value LOWER value
    (27) condition -> . value GREATER value
    (28) condition -> . value LEQ value
    (29) condition -> . value GEQ value
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    condition                      shift and go to state 23
    value                          shift and go to state 24
    identifier                     shift and go to state 26

state 11

    (12) command -> REPEAT . commands UNTIL condition SEMICOLON
    (7) commands -> . commands command
    (8) commands -> . command
    (9) command -> . READ identifier SEMICOLON
    (10) command -> . identifier ASSIGNMENT expression SEMICOLON
    (11) command -> . WHILE condition DO commands ENDWHILE
    (12) command -> . REPEAT commands UNTIL condition SEMICOLON
    (13) command -> . FOR pidentifier FROM value TO value DO commands ENDFOR
    (14) command -> . FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . IF condition THEN commands ELSE commands ENDIF
    (16) command -> . IF condition THEN commands ENDIF
    (17) command -> . WRITE value SEMICOLON
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    READ            shift and go to state 8
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 14
    WRITE           shift and go to state 15
    pidentifier     shift and go to state 13

    commands                       shift and go to state 27
    command                        shift and go to state 7
    identifier                     shift and go to state 9

state 12

    (13) command -> FOR . pidentifier FROM value TO value DO commands ENDFOR
    (14) command -> FOR . pidentifier FROM value DOWNTO value DO commands ENDFOR

    pidentifier     shift and go to state 28


state 13

    (32) identifier -> pidentifier .
    (33) identifier -> pidentifier . LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> pidentifier . LEFT_BRACKET NUM RIGHT_BRACKET

    ASSIGNMENT      reduce using rule 32 (identifier -> pidentifier .)
    SEMICOLON       reduce using rule 32 (identifier -> pidentifier .)
    EQUALS          reduce using rule 32 (identifier -> pidentifier .)
    NOT_EQUALS      reduce using rule 32 (identifier -> pidentifier .)
    LOWER           reduce using rule 32 (identifier -> pidentifier .)
    GREATER         reduce using rule 32 (identifier -> pidentifier .)
    LEQ             reduce using rule 32 (identifier -> pidentifier .)
    GEQ             reduce using rule 32 (identifier -> pidentifier .)
    ADD             reduce using rule 32 (identifier -> pidentifier .)
    SUB             reduce using rule 32 (identifier -> pidentifier .)
    MUL             reduce using rule 32 (identifier -> pidentifier .)
    DIV             reduce using rule 32 (identifier -> pidentifier .)
    MOD             reduce using rule 32 (identifier -> pidentifier .)
    DO              reduce using rule 32 (identifier -> pidentifier .)
    THEN            reduce using rule 32 (identifier -> pidentifier .)
    TO              reduce using rule 32 (identifier -> pidentifier .)
    DOWNTO          reduce using rule 32 (identifier -> pidentifier .)
    LEFT_BRACKET    shift and go to state 29


state 14

    (15) command -> IF . condition THEN commands ELSE commands ENDIF
    (16) command -> IF . condition THEN commands ENDIF
    (24) condition -> . value EQUALS value
    (25) condition -> . value NOT_EQUALS value
    (26) condition -> . value LOWER value
    (27) condition -> . value GREATER value
    (28) condition -> . value LEQ value
    (29) condition -> . value GEQ value
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    condition                      shift and go to state 30
    value                          shift and go to state 24
    identifier                     shift and go to state 26

state 15

    (17) command -> WRITE . value SEMICOLON
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    value                          shift and go to state 31
    identifier                     shift and go to state 26

state 16

    (1) program -> DECLARE declarations BEGIN . commands END
    (7) commands -> . commands command
    (8) commands -> . command
    (9) command -> . READ identifier SEMICOLON
    (10) command -> . identifier ASSIGNMENT expression SEMICOLON
    (11) command -> . WHILE condition DO commands ENDWHILE
    (12) command -> . REPEAT commands UNTIL condition SEMICOLON
    (13) command -> . FOR pidentifier FROM value TO value DO commands ENDFOR
    (14) command -> . FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . IF condition THEN commands ELSE commands ENDIF
    (16) command -> . IF condition THEN commands ENDIF
    (17) command -> . WRITE value SEMICOLON
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    READ            shift and go to state 8
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 14
    WRITE           shift and go to state 15
    pidentifier     shift and go to state 13

    commands                       shift and go to state 32
    command                        shift and go to state 7
    identifier                     shift and go to state 9

state 17

    (3) declarations -> declarations COMMA . pidentifier
    (4) declarations -> declarations COMMA . pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET

    pidentifier     shift and go to state 33


state 18

    (6) declarations -> pidentifier LEFT_BRACKET . NUM COLON NUM RIGHT_BRACKET

    NUM             shift and go to state 34


state 19

    (2) program -> BEGIN commands END .

    $end            reduce using rule 2 (program -> BEGIN commands END .)


state 20

    (7) commands -> commands command .

    END             reduce using rule 7 (commands -> commands command .)
    READ            reduce using rule 7 (commands -> commands command .)
    WHILE           reduce using rule 7 (commands -> commands command .)
    REPEAT          reduce using rule 7 (commands -> commands command .)
    FOR             reduce using rule 7 (commands -> commands command .)
    IF              reduce using rule 7 (commands -> commands command .)
    WRITE           reduce using rule 7 (commands -> commands command .)
    pidentifier     reduce using rule 7 (commands -> commands command .)
    UNTIL           reduce using rule 7 (commands -> commands command .)
    ENDWHILE        reduce using rule 7 (commands -> commands command .)
    ELSE            reduce using rule 7 (commands -> commands command .)
    ENDIF           reduce using rule 7 (commands -> commands command .)
    ENDFOR          reduce using rule 7 (commands -> commands command .)


state 21

    (9) command -> READ identifier . SEMICOLON

    SEMICOLON       shift and go to state 35


state 22

    (10) command -> identifier ASSIGNMENT . expression SEMICOLON
    (18) expression -> . value
    (19) expression -> . value ADD value
    (20) expression -> . value SUB value
    (21) expression -> . value MUL value
    (22) expression -> . value DIV value
    (23) expression -> . value MOD value
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    identifier                     shift and go to state 26
    expression                     shift and go to state 36
    value                          shift and go to state 37

state 23

    (11) command -> WHILE condition . DO commands ENDWHILE

    DO              shift and go to state 38


state 24

    (24) condition -> value . EQUALS value
    (25) condition -> value . NOT_EQUALS value
    (26) condition -> value . LOWER value
    (27) condition -> value . GREATER value
    (28) condition -> value . LEQ value
    (29) condition -> value . GEQ value

    EQUALS          shift and go to state 39
    NOT_EQUALS      shift and go to state 40
    LOWER           shift and go to state 41
    GREATER         shift and go to state 42
    LEQ             shift and go to state 43
    GEQ             shift and go to state 44


state 25

    (30) value -> NUM .

    EQUALS          reduce using rule 30 (value -> NUM .)
    NOT_EQUALS      reduce using rule 30 (value -> NUM .)
    LOWER           reduce using rule 30 (value -> NUM .)
    GREATER         reduce using rule 30 (value -> NUM .)
    LEQ             reduce using rule 30 (value -> NUM .)
    GEQ             reduce using rule 30 (value -> NUM .)
    SEMICOLON       reduce using rule 30 (value -> NUM .)
    ADD             reduce using rule 30 (value -> NUM .)
    SUB             reduce using rule 30 (value -> NUM .)
    MUL             reduce using rule 30 (value -> NUM .)
    DIV             reduce using rule 30 (value -> NUM .)
    MOD             reduce using rule 30 (value -> NUM .)
    DO              reduce using rule 30 (value -> NUM .)
    THEN            reduce using rule 30 (value -> NUM .)
    TO              reduce using rule 30 (value -> NUM .)
    DOWNTO          reduce using rule 30 (value -> NUM .)


state 26

    (31) value -> identifier .

    EQUALS          reduce using rule 31 (value -> identifier .)
    NOT_EQUALS      reduce using rule 31 (value -> identifier .)
    LOWER           reduce using rule 31 (value -> identifier .)
    GREATER         reduce using rule 31 (value -> identifier .)
    LEQ             reduce using rule 31 (value -> identifier .)
    GEQ             reduce using rule 31 (value -> identifier .)
    SEMICOLON       reduce using rule 31 (value -> identifier .)
    ADD             reduce using rule 31 (value -> identifier .)
    SUB             reduce using rule 31 (value -> identifier .)
    MUL             reduce using rule 31 (value -> identifier .)
    DIV             reduce using rule 31 (value -> identifier .)
    MOD             reduce using rule 31 (value -> identifier .)
    DO              reduce using rule 31 (value -> identifier .)
    THEN            reduce using rule 31 (value -> identifier .)
    TO              reduce using rule 31 (value -> identifier .)
    DOWNTO          reduce using rule 31 (value -> identifier .)


state 27

    (12) command -> REPEAT commands . UNTIL condition SEMICOLON
    (7) commands -> commands . command
    (9) command -> . READ identifier SEMICOLON
    (10) command -> . identifier ASSIGNMENT expression SEMICOLON
    (11) command -> . WHILE condition DO commands ENDWHILE
    (12) command -> . REPEAT commands UNTIL condition SEMICOLON
    (13) command -> . FOR pidentifier FROM value TO value DO commands ENDFOR
    (14) command -> . FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . IF condition THEN commands ELSE commands ENDIF
    (16) command -> . IF condition THEN commands ENDIF
    (17) command -> . WRITE value SEMICOLON
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    UNTIL           shift and go to state 45
    READ            shift and go to state 8
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 14
    WRITE           shift and go to state 15
    pidentifier     shift and go to state 13

    command                        shift and go to state 20
    identifier                     shift and go to state 9

state 28

    (13) command -> FOR pidentifier . FROM value TO value DO commands ENDFOR
    (14) command -> FOR pidentifier . FROM value DOWNTO value DO commands ENDFOR

    FROM            shift and go to state 46


state 29

    (33) identifier -> pidentifier LEFT_BRACKET . pidentifier RIGHT_BRACKET
    (34) identifier -> pidentifier LEFT_BRACKET . NUM RIGHT_BRACKET

    pidentifier     shift and go to state 47
    NUM             shift and go to state 48


state 30

    (15) command -> IF condition . THEN commands ELSE commands ENDIF
    (16) command -> IF condition . THEN commands ENDIF

    THEN            shift and go to state 49


state 31

    (17) command -> WRITE value . SEMICOLON

    SEMICOLON       shift and go to state 50


state 32

    (1) program -> DECLARE declarations BEGIN commands . END
    (7) commands -> commands . command
    (9) command -> . READ identifier SEMICOLON
    (10) command -> . identifier ASSIGNMENT expression SEMICOLON
    (11) command -> . WHILE condition DO commands ENDWHILE
    (12) command -> . REPEAT commands UNTIL condition SEMICOLON
    (13) command -> . FOR pidentifier FROM value TO value DO commands ENDFOR
    (14) command -> . FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . IF condition THEN commands ELSE commands ENDIF
    (16) command -> . IF condition THEN commands ENDIF
    (17) command -> . WRITE value SEMICOLON
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    END             shift and go to state 51
    READ            shift and go to state 8
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 14
    WRITE           shift and go to state 15
    pidentifier     shift and go to state 13

    command                        shift and go to state 20
    identifier                     shift and go to state 9

state 33

    (3) declarations -> declarations COMMA pidentifier .
    (4) declarations -> declarations COMMA pidentifier . LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET

    BEGIN           reduce using rule 3 (declarations -> declarations COMMA pidentifier .)
    COMMA           reduce using rule 3 (declarations -> declarations COMMA pidentifier .)
    LEFT_BRACKET    shift and go to state 52


state 34

    (6) declarations -> pidentifier LEFT_BRACKET NUM . COLON NUM RIGHT_BRACKET

    COLON           shift and go to state 53


state 35

    (9) command -> READ identifier SEMICOLON .

    END             reduce using rule 9 (command -> READ identifier SEMICOLON .)
    READ            reduce using rule 9 (command -> READ identifier SEMICOLON .)
    WHILE           reduce using rule 9 (command -> READ identifier SEMICOLON .)
    REPEAT          reduce using rule 9 (command -> READ identifier SEMICOLON .)
    FOR             reduce using rule 9 (command -> READ identifier SEMICOLON .)
    IF              reduce using rule 9 (command -> READ identifier SEMICOLON .)
    WRITE           reduce using rule 9 (command -> READ identifier SEMICOLON .)
    pidentifier     reduce using rule 9 (command -> READ identifier SEMICOLON .)
    UNTIL           reduce using rule 9 (command -> READ identifier SEMICOLON .)
    ENDWHILE        reduce using rule 9 (command -> READ identifier SEMICOLON .)
    ELSE            reduce using rule 9 (command -> READ identifier SEMICOLON .)
    ENDIF           reduce using rule 9 (command -> READ identifier SEMICOLON .)
    ENDFOR          reduce using rule 9 (command -> READ identifier SEMICOLON .)


state 36

    (10) command -> identifier ASSIGNMENT expression . SEMICOLON

    SEMICOLON       shift and go to state 54


state 37

    (18) expression -> value .
    (19) expression -> value . ADD value
    (20) expression -> value . SUB value
    (21) expression -> value . MUL value
    (22) expression -> value . DIV value
    (23) expression -> value . MOD value

    SEMICOLON       reduce using rule 18 (expression -> value .)
    ADD             shift and go to state 55
    SUB             shift and go to state 56
    MUL             shift and go to state 57
    DIV             shift and go to state 58
    MOD             shift and go to state 59


state 38

    (11) command -> WHILE condition DO . commands ENDWHILE
    (7) commands -> . commands command
    (8) commands -> . command
    (9) command -> . READ identifier SEMICOLON
    (10) command -> . identifier ASSIGNMENT expression SEMICOLON
    (11) command -> . WHILE condition DO commands ENDWHILE
    (12) command -> . REPEAT commands UNTIL condition SEMICOLON
    (13) command -> . FOR pidentifier FROM value TO value DO commands ENDFOR
    (14) command -> . FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . IF condition THEN commands ELSE commands ENDIF
    (16) command -> . IF condition THEN commands ENDIF
    (17) command -> . WRITE value SEMICOLON
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    READ            shift and go to state 8
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 14
    WRITE           shift and go to state 15
    pidentifier     shift and go to state 13

    commands                       shift and go to state 60
    command                        shift and go to state 7
    identifier                     shift and go to state 9

state 39

    (24) condition -> value EQUALS . value
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    value                          shift and go to state 61
    identifier                     shift and go to state 26

state 40

    (25) condition -> value NOT_EQUALS . value
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    value                          shift and go to state 62
    identifier                     shift and go to state 26

state 41

    (26) condition -> value LOWER . value
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    value                          shift and go to state 63
    identifier                     shift and go to state 26

state 42

    (27) condition -> value GREATER . value
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    value                          shift and go to state 64
    identifier                     shift and go to state 26

state 43

    (28) condition -> value LEQ . value
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    value                          shift and go to state 65
    identifier                     shift and go to state 26

state 44

    (29) condition -> value GEQ . value
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    value                          shift and go to state 66
    identifier                     shift and go to state 26

state 45

    (12) command -> REPEAT commands UNTIL . condition SEMICOLON
    (24) condition -> . value EQUALS value
    (25) condition -> . value NOT_EQUALS value
    (26) condition -> . value LOWER value
    (27) condition -> . value GREATER value
    (28) condition -> . value LEQ value
    (29) condition -> . value GEQ value
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    condition                      shift and go to state 67
    value                          shift and go to state 24
    identifier                     shift and go to state 26

state 46

    (13) command -> FOR pidentifier FROM . value TO value DO commands ENDFOR
    (14) command -> FOR pidentifier FROM . value DOWNTO value DO commands ENDFOR
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    value                          shift and go to state 68
    identifier                     shift and go to state 26

state 47

    (33) identifier -> pidentifier LEFT_BRACKET pidentifier . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 69


state 48

    (34) identifier -> pidentifier LEFT_BRACKET NUM . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 70


state 49

    (15) command -> IF condition THEN . commands ELSE commands ENDIF
    (16) command -> IF condition THEN . commands ENDIF
    (7) commands -> . commands command
    (8) commands -> . command
    (9) command -> . READ identifier SEMICOLON
    (10) command -> . identifier ASSIGNMENT expression SEMICOLON
    (11) command -> . WHILE condition DO commands ENDWHILE
    (12) command -> . REPEAT commands UNTIL condition SEMICOLON
    (13) command -> . FOR pidentifier FROM value TO value DO commands ENDFOR
    (14) command -> . FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . IF condition THEN commands ELSE commands ENDIF
    (16) command -> . IF condition THEN commands ENDIF
    (17) command -> . WRITE value SEMICOLON
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    READ            shift and go to state 8
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 14
    WRITE           shift and go to state 15
    pidentifier     shift and go to state 13

    commands                       shift and go to state 71
    command                        shift and go to state 7
    identifier                     shift and go to state 9

state 50

    (17) command -> WRITE value SEMICOLON .

    END             reduce using rule 17 (command -> WRITE value SEMICOLON .)
    READ            reduce using rule 17 (command -> WRITE value SEMICOLON .)
    WHILE           reduce using rule 17 (command -> WRITE value SEMICOLON .)
    REPEAT          reduce using rule 17 (command -> WRITE value SEMICOLON .)
    FOR             reduce using rule 17 (command -> WRITE value SEMICOLON .)
    IF              reduce using rule 17 (command -> WRITE value SEMICOLON .)
    WRITE           reduce using rule 17 (command -> WRITE value SEMICOLON .)
    pidentifier     reduce using rule 17 (command -> WRITE value SEMICOLON .)
    UNTIL           reduce using rule 17 (command -> WRITE value SEMICOLON .)
    ENDWHILE        reduce using rule 17 (command -> WRITE value SEMICOLON .)
    ELSE            reduce using rule 17 (command -> WRITE value SEMICOLON .)
    ENDIF           reduce using rule 17 (command -> WRITE value SEMICOLON .)
    ENDFOR          reduce using rule 17 (command -> WRITE value SEMICOLON .)


state 51

    (1) program -> DECLARE declarations BEGIN commands END .

    $end            reduce using rule 1 (program -> DECLARE declarations BEGIN commands END .)


state 52

    (4) declarations -> declarations COMMA pidentifier LEFT_BRACKET . NUM COLON NUM RIGHT_BRACKET

    NUM             shift and go to state 72


state 53

    (6) declarations -> pidentifier LEFT_BRACKET NUM COLON . NUM RIGHT_BRACKET

    NUM             shift and go to state 73


state 54

    (10) command -> identifier ASSIGNMENT expression SEMICOLON .

    END             reduce using rule 10 (command -> identifier ASSIGNMENT expression SEMICOLON .)
    READ            reduce using rule 10 (command -> identifier ASSIGNMENT expression SEMICOLON .)
    WHILE           reduce using rule 10 (command -> identifier ASSIGNMENT expression SEMICOLON .)
    REPEAT          reduce using rule 10 (command -> identifier ASSIGNMENT expression SEMICOLON .)
    FOR             reduce using rule 10 (command -> identifier ASSIGNMENT expression SEMICOLON .)
    IF              reduce using rule 10 (command -> identifier ASSIGNMENT expression SEMICOLON .)
    WRITE           reduce using rule 10 (command -> identifier ASSIGNMENT expression SEMICOLON .)
    pidentifier     reduce using rule 10 (command -> identifier ASSIGNMENT expression SEMICOLON .)
    UNTIL           reduce using rule 10 (command -> identifier ASSIGNMENT expression SEMICOLON .)
    ENDWHILE        reduce using rule 10 (command -> identifier ASSIGNMENT expression SEMICOLON .)
    ELSE            reduce using rule 10 (command -> identifier ASSIGNMENT expression SEMICOLON .)
    ENDIF           reduce using rule 10 (command -> identifier ASSIGNMENT expression SEMICOLON .)
    ENDFOR          reduce using rule 10 (command -> identifier ASSIGNMENT expression SEMICOLON .)


state 55

    (19) expression -> value ADD . value
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    value                          shift and go to state 74
    identifier                     shift and go to state 26

state 56

    (20) expression -> value SUB . value
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    value                          shift and go to state 75
    identifier                     shift and go to state 26

state 57

    (21) expression -> value MUL . value
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    value                          shift and go to state 76
    identifier                     shift and go to state 26

state 58

    (22) expression -> value DIV . value
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    value                          shift and go to state 77
    identifier                     shift and go to state 26

state 59

    (23) expression -> value MOD . value
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    value                          shift and go to state 78
    identifier                     shift and go to state 26

state 60

    (11) command -> WHILE condition DO commands . ENDWHILE
    (7) commands -> commands . command
    (9) command -> . READ identifier SEMICOLON
    (10) command -> . identifier ASSIGNMENT expression SEMICOLON
    (11) command -> . WHILE condition DO commands ENDWHILE
    (12) command -> . REPEAT commands UNTIL condition SEMICOLON
    (13) command -> . FOR pidentifier FROM value TO value DO commands ENDFOR
    (14) command -> . FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . IF condition THEN commands ELSE commands ENDIF
    (16) command -> . IF condition THEN commands ENDIF
    (17) command -> . WRITE value SEMICOLON
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    ENDWHILE        shift and go to state 79
    READ            shift and go to state 8
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 14
    WRITE           shift and go to state 15
    pidentifier     shift and go to state 13

    command                        shift and go to state 20
    identifier                     shift and go to state 9

state 61

    (24) condition -> value EQUALS value .

    DO              reduce using rule 24 (condition -> value EQUALS value .)
    THEN            reduce using rule 24 (condition -> value EQUALS value .)
    SEMICOLON       reduce using rule 24 (condition -> value EQUALS value .)


state 62

    (25) condition -> value NOT_EQUALS value .

    DO              reduce using rule 25 (condition -> value NOT_EQUALS value .)
    THEN            reduce using rule 25 (condition -> value NOT_EQUALS value .)
    SEMICOLON       reduce using rule 25 (condition -> value NOT_EQUALS value .)


state 63

    (26) condition -> value LOWER value .

    DO              reduce using rule 26 (condition -> value LOWER value .)
    THEN            reduce using rule 26 (condition -> value LOWER value .)
    SEMICOLON       reduce using rule 26 (condition -> value LOWER value .)


state 64

    (27) condition -> value GREATER value .

    DO              reduce using rule 27 (condition -> value GREATER value .)
    THEN            reduce using rule 27 (condition -> value GREATER value .)
    SEMICOLON       reduce using rule 27 (condition -> value GREATER value .)


state 65

    (28) condition -> value LEQ value .

    DO              reduce using rule 28 (condition -> value LEQ value .)
    THEN            reduce using rule 28 (condition -> value LEQ value .)
    SEMICOLON       reduce using rule 28 (condition -> value LEQ value .)


state 66

    (29) condition -> value GEQ value .

    DO              reduce using rule 29 (condition -> value GEQ value .)
    THEN            reduce using rule 29 (condition -> value GEQ value .)
    SEMICOLON       reduce using rule 29 (condition -> value GEQ value .)


state 67

    (12) command -> REPEAT commands UNTIL condition . SEMICOLON

    SEMICOLON       shift and go to state 80


state 68

    (13) command -> FOR pidentifier FROM value . TO value DO commands ENDFOR
    (14) command -> FOR pidentifier FROM value . DOWNTO value DO commands ENDFOR

    TO              shift and go to state 81
    DOWNTO          shift and go to state 82


state 69

    (33) identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET .

    ASSIGNMENT      reduce using rule 33 (identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 33 (identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET .)
    EQUALS          reduce using rule 33 (identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET .)
    NOT_EQUALS      reduce using rule 33 (identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET .)
    LOWER           reduce using rule 33 (identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET .)
    GREATER         reduce using rule 33 (identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET .)
    LEQ             reduce using rule 33 (identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET .)
    GEQ             reduce using rule 33 (identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET .)
    ADD             reduce using rule 33 (identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET .)
    SUB             reduce using rule 33 (identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET .)
    MUL             reduce using rule 33 (identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET .)
    DIV             reduce using rule 33 (identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET .)
    MOD             reduce using rule 33 (identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET .)
    DO              reduce using rule 33 (identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET .)
    THEN            reduce using rule 33 (identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET .)
    TO              reduce using rule 33 (identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET .)
    DOWNTO          reduce using rule 33 (identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET .)


state 70

    (34) identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET .

    ASSIGNMENT      reduce using rule 34 (identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 34 (identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET .)
    EQUALS          reduce using rule 34 (identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET .)
    NOT_EQUALS      reduce using rule 34 (identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET .)
    LOWER           reduce using rule 34 (identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET .)
    GREATER         reduce using rule 34 (identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET .)
    LEQ             reduce using rule 34 (identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET .)
    GEQ             reduce using rule 34 (identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET .)
    ADD             reduce using rule 34 (identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET .)
    SUB             reduce using rule 34 (identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET .)
    MUL             reduce using rule 34 (identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET .)
    DIV             reduce using rule 34 (identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET .)
    MOD             reduce using rule 34 (identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET .)
    DO              reduce using rule 34 (identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET .)
    THEN            reduce using rule 34 (identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET .)
    TO              reduce using rule 34 (identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET .)
    DOWNTO          reduce using rule 34 (identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET .)


state 71

    (15) command -> IF condition THEN commands . ELSE commands ENDIF
    (16) command -> IF condition THEN commands . ENDIF
    (7) commands -> commands . command
    (9) command -> . READ identifier SEMICOLON
    (10) command -> . identifier ASSIGNMENT expression SEMICOLON
    (11) command -> . WHILE condition DO commands ENDWHILE
    (12) command -> . REPEAT commands UNTIL condition SEMICOLON
    (13) command -> . FOR pidentifier FROM value TO value DO commands ENDFOR
    (14) command -> . FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . IF condition THEN commands ELSE commands ENDIF
    (16) command -> . IF condition THEN commands ENDIF
    (17) command -> . WRITE value SEMICOLON
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    ELSE            shift and go to state 83
    ENDIF           shift and go to state 84
    READ            shift and go to state 8
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 14
    WRITE           shift and go to state 15
    pidentifier     shift and go to state 13

    command                        shift and go to state 20
    identifier                     shift and go to state 9

state 72

    (4) declarations -> declarations COMMA pidentifier LEFT_BRACKET NUM . COLON NUM RIGHT_BRACKET

    COLON           shift and go to state 85


state 73

    (6) declarations -> pidentifier LEFT_BRACKET NUM COLON NUM . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 86


state 74

    (19) expression -> value ADD value .

    SEMICOLON       reduce using rule 19 (expression -> value ADD value .)


state 75

    (20) expression -> value SUB value .

    SEMICOLON       reduce using rule 20 (expression -> value SUB value .)


state 76

    (21) expression -> value MUL value .

    SEMICOLON       reduce using rule 21 (expression -> value MUL value .)


state 77

    (22) expression -> value DIV value .

    SEMICOLON       reduce using rule 22 (expression -> value DIV value .)


state 78

    (23) expression -> value MOD value .

    SEMICOLON       reduce using rule 23 (expression -> value MOD value .)


state 79

    (11) command -> WHILE condition DO commands ENDWHILE .

    END             reduce using rule 11 (command -> WHILE condition DO commands ENDWHILE .)
    READ            reduce using rule 11 (command -> WHILE condition DO commands ENDWHILE .)
    WHILE           reduce using rule 11 (command -> WHILE condition DO commands ENDWHILE .)
    REPEAT          reduce using rule 11 (command -> WHILE condition DO commands ENDWHILE .)
    FOR             reduce using rule 11 (command -> WHILE condition DO commands ENDWHILE .)
    IF              reduce using rule 11 (command -> WHILE condition DO commands ENDWHILE .)
    WRITE           reduce using rule 11 (command -> WHILE condition DO commands ENDWHILE .)
    pidentifier     reduce using rule 11 (command -> WHILE condition DO commands ENDWHILE .)
    UNTIL           reduce using rule 11 (command -> WHILE condition DO commands ENDWHILE .)
    ENDWHILE        reduce using rule 11 (command -> WHILE condition DO commands ENDWHILE .)
    ELSE            reduce using rule 11 (command -> WHILE condition DO commands ENDWHILE .)
    ENDIF           reduce using rule 11 (command -> WHILE condition DO commands ENDWHILE .)
    ENDFOR          reduce using rule 11 (command -> WHILE condition DO commands ENDWHILE .)


state 80

    (12) command -> REPEAT commands UNTIL condition SEMICOLON .

    END             reduce using rule 12 (command -> REPEAT commands UNTIL condition SEMICOLON .)
    READ            reduce using rule 12 (command -> REPEAT commands UNTIL condition SEMICOLON .)
    WHILE           reduce using rule 12 (command -> REPEAT commands UNTIL condition SEMICOLON .)
    REPEAT          reduce using rule 12 (command -> REPEAT commands UNTIL condition SEMICOLON .)
    FOR             reduce using rule 12 (command -> REPEAT commands UNTIL condition SEMICOLON .)
    IF              reduce using rule 12 (command -> REPEAT commands UNTIL condition SEMICOLON .)
    WRITE           reduce using rule 12 (command -> REPEAT commands UNTIL condition SEMICOLON .)
    pidentifier     reduce using rule 12 (command -> REPEAT commands UNTIL condition SEMICOLON .)
    UNTIL           reduce using rule 12 (command -> REPEAT commands UNTIL condition SEMICOLON .)
    ENDWHILE        reduce using rule 12 (command -> REPEAT commands UNTIL condition SEMICOLON .)
    ELSE            reduce using rule 12 (command -> REPEAT commands UNTIL condition SEMICOLON .)
    ENDIF           reduce using rule 12 (command -> REPEAT commands UNTIL condition SEMICOLON .)
    ENDFOR          reduce using rule 12 (command -> REPEAT commands UNTIL condition SEMICOLON .)


state 81

    (13) command -> FOR pidentifier FROM value TO . value DO commands ENDFOR
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    value                          shift and go to state 87
    identifier                     shift and go to state 26

state 82

    (14) command -> FOR pidentifier FROM value DOWNTO . value DO commands ENDFOR
    (30) value -> . NUM
    (31) value -> . identifier
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    NUM             shift and go to state 25
    pidentifier     shift and go to state 13

    value                          shift and go to state 88
    identifier                     shift and go to state 26

state 83

    (15) command -> IF condition THEN commands ELSE . commands ENDIF
    (7) commands -> . commands command
    (8) commands -> . command
    (9) command -> . READ identifier SEMICOLON
    (10) command -> . identifier ASSIGNMENT expression SEMICOLON
    (11) command -> . WHILE condition DO commands ENDWHILE
    (12) command -> . REPEAT commands UNTIL condition SEMICOLON
    (13) command -> . FOR pidentifier FROM value TO value DO commands ENDFOR
    (14) command -> . FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . IF condition THEN commands ELSE commands ENDIF
    (16) command -> . IF condition THEN commands ENDIF
    (17) command -> . WRITE value SEMICOLON
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    READ            shift and go to state 8
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 14
    WRITE           shift and go to state 15
    pidentifier     shift and go to state 13

    commands                       shift and go to state 89
    command                        shift and go to state 7
    identifier                     shift and go to state 9

state 84

    (16) command -> IF condition THEN commands ENDIF .

    END             reduce using rule 16 (command -> IF condition THEN commands ENDIF .)
    READ            reduce using rule 16 (command -> IF condition THEN commands ENDIF .)
    WHILE           reduce using rule 16 (command -> IF condition THEN commands ENDIF .)
    REPEAT          reduce using rule 16 (command -> IF condition THEN commands ENDIF .)
    FOR             reduce using rule 16 (command -> IF condition THEN commands ENDIF .)
    IF              reduce using rule 16 (command -> IF condition THEN commands ENDIF .)
    WRITE           reduce using rule 16 (command -> IF condition THEN commands ENDIF .)
    pidentifier     reduce using rule 16 (command -> IF condition THEN commands ENDIF .)
    UNTIL           reduce using rule 16 (command -> IF condition THEN commands ENDIF .)
    ENDWHILE        reduce using rule 16 (command -> IF condition THEN commands ENDIF .)
    ELSE            reduce using rule 16 (command -> IF condition THEN commands ENDIF .)
    ENDIF           reduce using rule 16 (command -> IF condition THEN commands ENDIF .)
    ENDFOR          reduce using rule 16 (command -> IF condition THEN commands ENDIF .)


state 85

    (4) declarations -> declarations COMMA pidentifier LEFT_BRACKET NUM COLON . NUM RIGHT_BRACKET

    NUM             shift and go to state 90


state 86

    (6) declarations -> pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET .

    BEGIN           reduce using rule 6 (declarations -> pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET .)
    COMMA           reduce using rule 6 (declarations -> pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET .)


state 87

    (13) command -> FOR pidentifier FROM value TO value . DO commands ENDFOR

    DO              shift and go to state 91


state 88

    (14) command -> FOR pidentifier FROM value DOWNTO value . DO commands ENDFOR

    DO              shift and go to state 92


state 89

    (15) command -> IF condition THEN commands ELSE commands . ENDIF
    (7) commands -> commands . command
    (9) command -> . READ identifier SEMICOLON
    (10) command -> . identifier ASSIGNMENT expression SEMICOLON
    (11) command -> . WHILE condition DO commands ENDWHILE
    (12) command -> . REPEAT commands UNTIL condition SEMICOLON
    (13) command -> . FOR pidentifier FROM value TO value DO commands ENDFOR
    (14) command -> . FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . IF condition THEN commands ELSE commands ENDIF
    (16) command -> . IF condition THEN commands ENDIF
    (17) command -> . WRITE value SEMICOLON
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    ENDIF           shift and go to state 93
    READ            shift and go to state 8
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 14
    WRITE           shift and go to state 15
    pidentifier     shift and go to state 13

    command                        shift and go to state 20
    identifier                     shift and go to state 9

state 90

    (4) declarations -> declarations COMMA pidentifier LEFT_BRACKET NUM COLON NUM . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 94


state 91

    (13) command -> FOR pidentifier FROM value TO value DO . commands ENDFOR
    (7) commands -> . commands command
    (8) commands -> . command
    (9) command -> . READ identifier SEMICOLON
    (10) command -> . identifier ASSIGNMENT expression SEMICOLON
    (11) command -> . WHILE condition DO commands ENDWHILE
    (12) command -> . REPEAT commands UNTIL condition SEMICOLON
    (13) command -> . FOR pidentifier FROM value TO value DO commands ENDFOR
    (14) command -> . FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . IF condition THEN commands ELSE commands ENDIF
    (16) command -> . IF condition THEN commands ENDIF
    (17) command -> . WRITE value SEMICOLON
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    READ            shift and go to state 8
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 14
    WRITE           shift and go to state 15
    pidentifier     shift and go to state 13

    commands                       shift and go to state 95
    command                        shift and go to state 7
    identifier                     shift and go to state 9

state 92

    (14) command -> FOR pidentifier FROM value DOWNTO value DO . commands ENDFOR
    (7) commands -> . commands command
    (8) commands -> . command
    (9) command -> . READ identifier SEMICOLON
    (10) command -> . identifier ASSIGNMENT expression SEMICOLON
    (11) command -> . WHILE condition DO commands ENDWHILE
    (12) command -> . REPEAT commands UNTIL condition SEMICOLON
    (13) command -> . FOR pidentifier FROM value TO value DO commands ENDFOR
    (14) command -> . FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . IF condition THEN commands ELSE commands ENDIF
    (16) command -> . IF condition THEN commands ENDIF
    (17) command -> . WRITE value SEMICOLON
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    READ            shift and go to state 8
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 14
    WRITE           shift and go to state 15
    pidentifier     shift and go to state 13

    commands                       shift and go to state 96
    command                        shift and go to state 7
    identifier                     shift and go to state 9

state 93

    (15) command -> IF condition THEN commands ELSE commands ENDIF .

    END             reduce using rule 15 (command -> IF condition THEN commands ELSE commands ENDIF .)
    READ            reduce using rule 15 (command -> IF condition THEN commands ELSE commands ENDIF .)
    WHILE           reduce using rule 15 (command -> IF condition THEN commands ELSE commands ENDIF .)
    REPEAT          reduce using rule 15 (command -> IF condition THEN commands ELSE commands ENDIF .)
    FOR             reduce using rule 15 (command -> IF condition THEN commands ELSE commands ENDIF .)
    IF              reduce using rule 15 (command -> IF condition THEN commands ELSE commands ENDIF .)
    WRITE           reduce using rule 15 (command -> IF condition THEN commands ELSE commands ENDIF .)
    pidentifier     reduce using rule 15 (command -> IF condition THEN commands ELSE commands ENDIF .)
    UNTIL           reduce using rule 15 (command -> IF condition THEN commands ELSE commands ENDIF .)
    ENDWHILE        reduce using rule 15 (command -> IF condition THEN commands ELSE commands ENDIF .)
    ELSE            reduce using rule 15 (command -> IF condition THEN commands ELSE commands ENDIF .)
    ENDIF           reduce using rule 15 (command -> IF condition THEN commands ELSE commands ENDIF .)
    ENDFOR          reduce using rule 15 (command -> IF condition THEN commands ELSE commands ENDIF .)


state 94

    (4) declarations -> declarations COMMA pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET .

    BEGIN           reduce using rule 4 (declarations -> declarations COMMA pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET .)
    COMMA           reduce using rule 4 (declarations -> declarations COMMA pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET .)


state 95

    (13) command -> FOR pidentifier FROM value TO value DO commands . ENDFOR
    (7) commands -> commands . command
    (9) command -> . READ identifier SEMICOLON
    (10) command -> . identifier ASSIGNMENT expression SEMICOLON
    (11) command -> . WHILE condition DO commands ENDWHILE
    (12) command -> . REPEAT commands UNTIL condition SEMICOLON
    (13) command -> . FOR pidentifier FROM value TO value DO commands ENDFOR
    (14) command -> . FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . IF condition THEN commands ELSE commands ENDIF
    (16) command -> . IF condition THEN commands ENDIF
    (17) command -> . WRITE value SEMICOLON
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    ENDFOR          shift and go to state 97
    READ            shift and go to state 8
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 14
    WRITE           shift and go to state 15
    pidentifier     shift and go to state 13

    command                        shift and go to state 20
    identifier                     shift and go to state 9

state 96

    (14) command -> FOR pidentifier FROM value DOWNTO value DO commands . ENDFOR
    (7) commands -> commands . command
    (9) command -> . READ identifier SEMICOLON
    (10) command -> . identifier ASSIGNMENT expression SEMICOLON
    (11) command -> . WHILE condition DO commands ENDWHILE
    (12) command -> . REPEAT commands UNTIL condition SEMICOLON
    (13) command -> . FOR pidentifier FROM value TO value DO commands ENDFOR
    (14) command -> . FOR pidentifier FROM value DOWNTO value DO commands ENDFOR
    (15) command -> . IF condition THEN commands ELSE commands ENDIF
    (16) command -> . IF condition THEN commands ENDIF
    (17) command -> . WRITE value SEMICOLON
    (32) identifier -> . pidentifier
    (33) identifier -> . pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET
    (34) identifier -> . pidentifier LEFT_BRACKET NUM RIGHT_BRACKET

    ENDFOR          shift and go to state 98
    READ            shift and go to state 8
    WHILE           shift and go to state 10
    REPEAT          shift and go to state 11
    FOR             shift and go to state 12
    IF              shift and go to state 14
    WRITE           shift and go to state 15
    pidentifier     shift and go to state 13

    command                        shift and go to state 20
    identifier                     shift and go to state 9

state 97

    (13) command -> FOR pidentifier FROM value TO value DO commands ENDFOR .

    END             reduce using rule 13 (command -> FOR pidentifier FROM value TO value DO commands ENDFOR .)
    READ            reduce using rule 13 (command -> FOR pidentifier FROM value TO value DO commands ENDFOR .)
    WHILE           reduce using rule 13 (command -> FOR pidentifier FROM value TO value DO commands ENDFOR .)
    REPEAT          reduce using rule 13 (command -> FOR pidentifier FROM value TO value DO commands ENDFOR .)
    FOR             reduce using rule 13 (command -> FOR pidentifier FROM value TO value DO commands ENDFOR .)
    IF              reduce using rule 13 (command -> FOR pidentifier FROM value TO value DO commands ENDFOR .)
    WRITE           reduce using rule 13 (command -> FOR pidentifier FROM value TO value DO commands ENDFOR .)
    pidentifier     reduce using rule 13 (command -> FOR pidentifier FROM value TO value DO commands ENDFOR .)
    UNTIL           reduce using rule 13 (command -> FOR pidentifier FROM value TO value DO commands ENDFOR .)
    ENDWHILE        reduce using rule 13 (command -> FOR pidentifier FROM value TO value DO commands ENDFOR .)
    ELSE            reduce using rule 13 (command -> FOR pidentifier FROM value TO value DO commands ENDFOR .)
    ENDIF           reduce using rule 13 (command -> FOR pidentifier FROM value TO value DO commands ENDFOR .)
    ENDFOR          reduce using rule 13 (command -> FOR pidentifier FROM value TO value DO commands ENDFOR .)


state 98

    (14) command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR .

    END             reduce using rule 14 (command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR .)
    READ            reduce using rule 14 (command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR .)
    WHILE           reduce using rule 14 (command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR .)
    REPEAT          reduce using rule 14 (command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR .)
    FOR             reduce using rule 14 (command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR .)
    IF              reduce using rule 14 (command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR .)
    WRITE           reduce using rule 14 (command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR .)
    pidentifier     reduce using rule 14 (command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR .)
    UNTIL           reduce using rule 14 (command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR .)
    ENDWHILE        reduce using rule 14 (command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR .)
    ELSE            reduce using rule 14 (command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR .)
    ENDIF           reduce using rule 14 (command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR .)
    ENDFOR          reduce using rule 14 (command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR .)

