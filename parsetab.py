
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftADDSUBleftMULDIVMODADD ASSIGNMENT BEGIN COLON COMMA DECLARE DIV DO DOWNTO ELSE END ENDFOR ENDIF ENDWHILE EQUALS FOR FROM GEQ GREATER IF LEFT_BRACKET LEQ LOWER MOD MUL NOT_EQUALS NUM READ REPEAT RIGHT_BRACKET SEMICOLON SUB THEN TO UNTIL WHILE WRITE pidentifierprogram : DECLARE declarations BEGIN commands END\n               | BEGIN commands ENDdeclarations : declarations COMMA pidentifier\n                    | declarations COMMA pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKETdeclarations : pidentifierdeclarations : pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKETcommands : commands command\n                | commandcommand : READ identifier SEMICOLONcommand : identifier ASSIGNMENT expression SEMICOLONcommand : IF condition THEN commands ELSE commands ENDIF\n               | IF  condition  THEN  commands  ENDIF\n               | WHILE  condition  DO  commands  ENDWHILE\n               | REPEAT  commands  UNTIL  condition SEMICOLON\n               | FOR  pidentifier  FROM  value TO  value DO  commands  ENDFOR\n               | FOR  pidentifier  FROM  value  DOWNTO  value DO  commands  ENDFORcommand : WRITE value SEMICOLONexpression : valueexpression : value ADD value\n                  | value SUB value\n                  | value MUL value\n                  | value DIV value\n                  | value MOD valuecondition : value EQUALS value\n                 | value NOT_EQUALS value\n                 | value LOWER value\n                 | value GREATER value\n                 | value LEQ value\n                 | value GEQ valuevalue : NUM\n             | identifieridentifier : pidentifier\n                  | pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKETidentifier : pidentifier LEFT_BRACKET NUM RIGHT_BRACKET'
    
_lr_action_items = {'DECLARE':([0,],[2,]),'BEGIN':([0,4,5,33,86,94,],[3,16,-5,-3,-6,-4,]),'$end':([1,19,51,],[0,-2,-1,]),'pidentifier':([2,3,6,7,8,10,11,12,13,15,16,17,20,22,28,30,32,35,38,39,40,41,42,43,44,45,46,47,50,54,55,56,57,58,59,60,67,79,80,81,82,83,84,87,91,92,93,95,96,97,98,],[5,14,14,-8,14,14,14,14,29,14,14,33,-7,14,14,48,14,-9,14,14,14,14,14,14,14,14,14,14,-17,-10,14,14,14,14,14,14,14,14,-12,-13,-14,14,14,14,-11,14,14,14,14,-15,-16,]),'READ':([3,6,7,12,16,20,28,32,35,38,45,50,54,60,67,79,80,81,82,87,91,92,93,95,96,97,98,],[8,8,-8,8,8,-7,8,8,-9,8,8,-17,-10,8,8,8,-12,-13,-14,8,-11,8,8,8,8,-15,-16,]),'IF':([3,6,7,12,16,20,28,32,35,38,45,50,54,60,67,79,80,81,82,87,91,92,93,95,96,97,98,],[10,10,-8,10,10,-7,10,10,-9,10,10,-17,-10,10,10,10,-12,-13,-14,10,-11,10,10,10,10,-15,-16,]),'WHILE':([3,6,7,12,16,20,28,32,35,38,45,50,54,60,67,79,80,81,82,87,91,92,93,95,96,97,98,],[11,11,-8,11,11,-7,11,11,-9,11,11,-17,-10,11,11,11,-12,-13,-14,11,-11,11,11,11,11,-15,-16,]),'REPEAT':([3,6,7,12,16,20,28,32,35,38,45,50,54,60,67,79,80,81,82,87,91,92,93,95,96,97,98,],[12,12,-8,12,12,-7,12,12,-9,12,12,-17,-10,12,12,12,-12,-13,-14,12,-11,12,12,12,12,-15,-16,]),'FOR':([3,6,7,12,16,20,28,32,35,38,45,50,54,60,67,79,80,81,82,87,91,92,93,95,96,97,98,],[13,13,-8,13,13,-7,13,13,-9,13,13,-17,-10,13,13,13,-12,-13,-14,13,-11,13,13,13,13,-15,-16,]),'WRITE':([3,6,7,12,16,20,28,32,35,38,45,50,54,60,67,79,80,81,82,87,91,92,93,95,96,97,98,],[15,15,-8,15,15,-7,15,15,-9,15,15,-17,-10,15,15,15,-12,-13,-14,15,-11,15,15,15,15,-15,-16,]),'COMMA':([4,5,33,86,94,],[17,-5,-3,-6,-4,]),'LEFT_BRACKET':([5,14,33,],[18,30,52,]),'END':([6,7,20,32,35,50,54,80,81,82,91,97,98,],[19,-8,-7,51,-9,-17,-10,-12,-13,-14,-11,-15,-16,]),'UNTIL':([7,20,28,35,50,54,80,81,82,91,97,98,],[-8,-7,46,-9,-17,-10,-12,-13,-14,-11,-15,-16,]),'ELSE':([7,20,35,50,54,60,80,81,82,91,97,98,],[-8,-7,-9,-17,-10,79,-12,-13,-14,-11,-15,-16,]),'ENDIF':([7,20,35,50,54,60,80,81,82,87,91,97,98,],[-8,-7,-9,-17,-10,80,-12,-13,-14,91,-11,-15,-16,]),'ENDWHILE':([7,20,35,50,54,67,80,81,82,91,97,98,],[-8,-7,-9,-17,-10,81,-12,-13,-14,-11,-15,-16,]),'ENDFOR':([7,20,35,50,54,80,81,82,91,95,96,97,98,],[-8,-7,-9,-17,-10,-12,-13,-14,-11,97,98,-15,-16,]),'ASSIGNMENT':([9,14,70,71,],[22,-32,-33,-34,]),'NUM':([10,11,15,18,22,30,39,40,41,42,43,44,46,47,52,53,55,56,57,58,59,83,84,85,],[25,25,25,34,25,49,25,25,25,25,25,25,25,25,72,73,25,25,25,25,25,25,25,90,]),'SEMICOLON':([14,21,25,26,31,36,37,61,62,63,64,65,66,68,70,71,74,75,76,77,78,],[-32,35,-30,-31,50,54,-18,-24,-25,-26,-27,-28,-29,82,-33,-34,-19,-20,-21,-22,-23,]),'EQUALS':([14,24,25,26,70,71,],[-32,39,-30,-31,-33,-34,]),'NOT_EQUALS':([14,24,25,26,70,71,],[-32,40,-30,-31,-33,-34,]),'LOWER':([14,24,25,26,70,71,],[-32,41,-30,-31,-33,-34,]),'GREATER':([14,24,25,26,70,71,],[-32,42,-30,-31,-33,-34,]),'LEQ':([14,24,25,26,70,71,],[-32,43,-30,-31,-33,-34,]),'GEQ':([14,24,25,26,70,71,],[-32,44,-30,-31,-33,-34,]),'ADD':([14,25,26,37,70,71,],[-32,-30,-31,55,-33,-34,]),'SUB':([14,25,26,37,70,71,],[-32,-30,-31,56,-33,-34,]),'MUL':([14,25,26,37,70,71,],[-32,-30,-31,57,-33,-34,]),'DIV':([14,25,26,37,70,71,],[-32,-30,-31,58,-33,-34,]),'MOD':([14,25,26,37,70,71,],[-32,-30,-31,59,-33,-34,]),'THEN':([14,23,25,26,61,62,63,64,65,66,70,71,],[-32,38,-30,-31,-24,-25,-26,-27,-28,-29,-33,-34,]),'DO':([14,25,26,27,61,62,63,64,65,66,70,71,88,89,],[-32,-30,-31,45,-24,-25,-26,-27,-28,-29,-33,-34,92,93,]),'TO':([14,25,26,69,70,71,],[-32,-30,-31,83,-33,-34,]),'DOWNTO':([14,25,26,69,70,71,],[-32,-30,-31,84,-33,-34,]),'FROM':([29,],[47,]),'COLON':([34,72,],[53,85,]),'RIGHT_BRACKET':([48,49,73,90,],[70,71,86,94,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([2,],[4,]),'commands':([3,12,16,38,45,79,92,93,],[6,28,32,60,67,87,95,96,]),'command':([3,6,12,16,28,32,38,45,60,67,79,87,92,93,95,96,],[7,20,7,7,20,20,7,7,20,20,7,20,7,7,20,20,]),'identifier':([3,6,8,10,11,12,15,16,22,28,32,38,39,40,41,42,43,44,45,46,47,55,56,57,58,59,60,67,79,83,84,87,92,93,95,96,],[9,9,21,26,26,9,26,9,26,9,9,9,26,26,26,26,26,26,9,26,26,26,26,26,26,26,9,9,9,26,26,9,9,9,9,9,]),'condition':([10,11,46,],[23,27,68,]),'value':([10,11,15,22,39,40,41,42,43,44,46,47,55,56,57,58,59,83,84,],[24,24,31,37,61,62,63,64,65,66,24,69,74,75,76,77,78,88,89,]),'expression':([22,],[36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> DECLARE declarations BEGIN commands END','program',5,'p_program','code_parser.py',125),
  ('program -> BEGIN commands END','program',3,'p_program','code_parser.py',126),
  ('declarations -> declarations COMMA pidentifier','declarations',3,'p_declarations_muliple','code_parser.py',129),
  ('declarations -> declarations COMMA pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET','declarations',8,'p_declarations_muliple','code_parser.py',130),
  ('declarations -> pidentifier','declarations',1,'p_declarations_single_var','code_parser.py',142),
  ('declarations -> pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET','declarations',6,'p_declarations_single_tab','code_parser.py',153),
  ('commands -> commands command','commands',2,'p_commands','code_parser.py',167),
  ('commands -> command','commands',1,'p_commands','code_parser.py',168),
  ('command -> READ identifier SEMICOLON','command',3,'p_command_read','code_parser.py',171),
  ('command -> identifier ASSIGNMENT expression SEMICOLON','command',4,'p_command_assignment','code_parser.py',180),
  ('command -> IF condition THEN commands ELSE commands ENDIF','command',7,'p_command_all','code_parser.py',236),
  ('command -> IF condition THEN commands ENDIF','command',5,'p_command_all','code_parser.py',237),
  ('command -> WHILE condition DO commands ENDWHILE','command',5,'p_command_all','code_parser.py',238),
  ('command -> REPEAT commands UNTIL condition SEMICOLON','command',5,'p_command_all','code_parser.py',239),
  ('command -> FOR pidentifier FROM value TO value DO commands ENDFOR','command',9,'p_command_all','code_parser.py',240),
  ('command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR','command',9,'p_command_all','code_parser.py',241),
  ('command -> WRITE value SEMICOLON','command',3,'p_command_write','code_parser.py',244),
  ('expression -> value','expression',1,'p_expression_val','code_parser.py',259),
  ('expression -> value ADD value','expression',3,'p_expression_math','code_parser.py',263),
  ('expression -> value SUB value','expression',3,'p_expression_math','code_parser.py',264),
  ('expression -> value MUL value','expression',3,'p_expression_math','code_parser.py',265),
  ('expression -> value DIV value','expression',3,'p_expression_math','code_parser.py',266),
  ('expression -> value MOD value','expression',3,'p_expression_math','code_parser.py',267),
  ('condition -> value EQUALS value','condition',3,'p_condition','code_parser.py',292),
  ('condition -> value NOT_EQUALS value','condition',3,'p_condition','code_parser.py',293),
  ('condition -> value LOWER value','condition',3,'p_condition','code_parser.py',294),
  ('condition -> value GREATER value','condition',3,'p_condition','code_parser.py',295),
  ('condition -> value LEQ value','condition',3,'p_condition','code_parser.py',296),
  ('condition -> value GEQ value','condition',3,'p_condition','code_parser.py',297),
  ('value -> NUM','value',1,'p_value','code_parser.py',300),
  ('value -> identifier','value',1,'p_value','code_parser.py',301),
  ('identifier -> pidentifier','identifier',1,'p_identifier','code_parser.py',305),
  ('identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET','identifier',4,'p_identifier','code_parser.py',306),
  ('identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET','identifier',4,'p_identifier_tab','code_parser.py',310),
]
