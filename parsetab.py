
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftADDSUBleftMULDIVMODADD ASSIGNMENT BEGIN COLON COMMA DECLARE DIV DO DOWNTO ELSE END ENDFOR ENDIF ENDWHILE EQUALS FOR FROM GEQ GREATER IF LEFT_BRACKET LEQ LOWER MOD MUL NOT_EQUALS NUM READ REPEAT RIGHT_BRACKET SEMICOLON SUB THEN TO UNTIL WHILE WRITE pidentifierprogram : DECLARE declarations BEGIN commands END\n               | BEGIN commands ENDdeclarations : declarations COMMA pidentifier\n                    | declarations COMMA pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKETdeclarations : pidentifierdeclarations : pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKETcommands : commands command\n                | commandcommand : READ identifier SEMICOLONcommand : identifier ASSIGNMENT expression SEMICOLONcommand : FOR  for_occured  pidentifier  get_pidentifier FROM  value first_value DOWNTO  value second_value DO do_occured commands  ENDFORcommand : FOR  for_occured  pidentifier  get_pidentifier FROM  value first_value TO  value second_value DO do_occured commands  ENDFORfirst_value :second_value :get_pidentifier :do_occured :for_occured :command : REPEAT repeat_occured  commands  UNTIL  condition SEMICOLONrepeat_occured :command : WHILE while_occured condition  DO  commands  ENDWHILEwhile_occured :command : IF if_occured condition THEN commands ELSE else_occured commands ENDIFelse_occured :command : IF if_occured condition  THEN  commands  ENDIFif_occured :command : WRITE value SEMICOLONexpression : valueexpression : value ADD value\n                  | value SUB value\n                  | value MUL value\n                  | value DIV value\n                  | value MOD valuecondition : value EQUALS value\n                 | value NOT_EQUALS value\n                 | value LOWER value\n                 | value GREATER value\n                 | value LEQ value\n                 | value GEQ valuevalue : NUMvalue : identifieridentifier : pidentifier\n                  | pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKETidentifier : pidentifier LEFT_BRACKET NUM RIGHT_BRACKET'
    
_lr_action_items = {'DECLARE':([0,],[2,]),'BEGIN':([0,4,5,32,84,93,],[3,16,-5,-3,-6,-4,]),'$end':([1,19,45,],[0,-2,-1,]),'pidentifier':([2,3,6,7,8,10,12,13,14,15,16,17,20,22,23,24,25,26,27,31,34,40,44,48,49,50,51,52,53,57,58,59,60,61,62,63,64,65,73,75,82,86,87,88,89,92,94,95,96,99,102,103,104,105,106,107,108,109,],[5,11,11,-8,11,-17,-19,-21,-25,11,11,32,-7,11,37,38,11,11,11,11,-9,11,-26,-10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-18,-20,-23,-24,11,11,11,11,-22,-16,-16,11,11,11,11,-11,-12,]),'READ':([3,6,7,12,16,20,25,31,34,40,44,48,58,65,75,82,86,87,88,89,92,96,99,102,103,104,105,106,107,108,109,],[8,8,-8,-19,8,-7,8,8,-9,8,-26,-10,8,8,8,8,-18,-20,-23,-24,8,8,-22,-16,-16,8,8,8,8,-11,-12,]),'FOR':([3,6,7,12,16,20,25,31,34,40,44,48,58,65,75,82,86,87,88,89,92,96,99,102,103,104,105,106,107,108,109,],[10,10,-8,-19,10,-7,10,10,-9,10,-26,-10,10,10,10,10,-18,-20,-23,-24,10,10,-22,-16,-16,10,10,10,10,-11,-12,]),'REPEAT':([3,6,7,12,16,20,25,31,34,40,44,48,58,65,75,82,86,87,88,89,92,96,99,102,103,104,105,106,107,108,109,],[12,12,-8,-19,12,-7,12,12,-9,12,-26,-10,12,12,12,12,-18,-20,-23,-24,12,12,-22,-16,-16,12,12,12,12,-11,-12,]),'WHILE':([3,6,7,12,16,20,25,31,34,40,44,48,58,65,75,82,86,87,88,89,92,96,99,102,103,104,105,106,107,108,109,],[13,13,-8,-19,13,-7,13,13,-9,13,-26,-10,13,13,13,13,-18,-20,-23,-24,13,13,-22,-16,-16,13,13,13,13,-11,-12,]),'IF':([3,6,7,12,16,20,25,31,34,40,44,48,58,65,75,82,86,87,88,89,92,96,99,102,103,104,105,106,107,108,109,],[14,14,-8,-19,14,-7,14,14,-9,14,-26,-10,14,14,14,14,-18,-20,-23,-24,14,14,-22,-16,-16,14,14,14,14,-11,-12,]),'WRITE':([3,6,7,12,16,20,25,31,34,40,44,48,58,65,75,82,86,87,88,89,92,96,99,102,103,104,105,106,107,108,109,],[15,15,-8,-19,15,-7,15,15,-9,15,-26,-10,15,15,15,15,-18,-20,-23,-24,15,15,-22,-16,-16,15,15,15,15,-11,-12,]),'COMMA':([4,5,32,84,93,],[17,-5,-3,-6,-4,]),'LEFT_BRACKET':([5,11,32,],[18,24,46,]),'END':([6,7,20,31,34,44,48,86,87,89,99,108,109,],[19,-8,-7,45,-9,-26,-10,-18,-20,-24,-22,-11,-12,]),'UNTIL':([7,20,34,40,44,48,86,87,89,99,108,109,],[-8,-7,-9,57,-26,-10,-18,-20,-24,-22,-11,-12,]),'ENDWHILE':([7,20,34,44,48,75,86,87,89,99,108,109,],[-8,-7,-9,-26,-10,87,-18,-20,-24,-22,-11,-12,]),'ELSE':([7,20,34,44,48,82,86,87,89,99,108,109,],[-8,-7,-9,-26,-10,88,-18,-20,-24,-22,-11,-12,]),'ENDIF':([7,20,34,44,48,82,86,87,89,96,99,108,109,],[-8,-7,-9,-26,-10,89,-18,-20,-24,99,-22,-11,-12,]),'ENDFOR':([7,20,34,44,48,86,87,89,99,106,107,108,109,],[-8,-7,-9,-26,-10,-18,-20,-24,-22,108,109,-11,-12,]),'ASSIGNMENT':([9,11,55,56,],[22,-41,-42,-43,]),'SEMICOLON':([11,21,28,29,30,35,36,55,56,68,69,70,71,72,74,76,77,78,79,80,81,],[-41,34,44,-39,-40,48,-27,-42,-43,-28,-29,-30,-31,-32,86,-33,-34,-35,-36,-37,-38,]),'ADD':([11,29,30,36,55,56,],[-41,-39,-40,49,-42,-43,]),'SUB':([11,29,30,36,55,56,],[-41,-39,-40,50,-42,-43,]),'MUL':([11,29,30,36,55,56,],[-41,-39,-40,51,-42,-43,]),'DIV':([11,29,30,36,55,56,],[-41,-39,-40,52,-42,-43,]),'MOD':([11,29,30,36,55,56,],[-41,-39,-40,53,-42,-43,]),'EQUALS':([11,29,30,42,55,56,],[-41,-39,-40,59,-42,-43,]),'NOT_EQUALS':([11,29,30,42,55,56,],[-41,-39,-40,60,-42,-43,]),'LOWER':([11,29,30,42,55,56,],[-41,-39,-40,61,-42,-43,]),'GREATER':([11,29,30,42,55,56,],[-41,-39,-40,62,-42,-43,]),'LEQ':([11,29,30,42,55,56,],[-41,-39,-40,63,-42,-43,]),'GEQ':([11,29,30,42,55,56,],[-41,-39,-40,64,-42,-43,]),'DO':([11,29,30,41,55,56,76,77,78,79,80,81,97,98,100,101,],[-41,-39,-40,58,-42,-43,-33,-34,-35,-36,-37,-38,-14,-14,102,103,]),'THEN':([11,29,30,43,55,56,76,77,78,79,80,81,],[-41,-39,-40,65,-42,-43,-33,-34,-35,-36,-37,-38,]),'DOWNTO':([11,29,30,55,56,85,91,],[-41,-39,-40,-42,-43,-13,94,]),'TO':([11,29,30,55,56,85,91,],[-41,-39,-40,-42,-43,-13,95,]),'NUM':([13,14,15,18,22,24,26,27,46,47,49,50,51,52,53,57,59,60,61,62,63,64,73,83,94,95,],[-21,-25,29,33,29,39,29,29,66,67,29,29,29,29,29,29,29,29,29,29,29,29,29,90,29,29,]),'COLON':([33,66,],[47,83,]),'FROM':([37,54,],[-15,73,]),'RIGHT_BRACKET':([38,39,67,90,],[55,56,84,93,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([2,],[4,]),'commands':([3,16,25,58,65,92,104,105,],[6,31,40,75,82,96,106,107,]),'command':([3,6,16,25,31,40,58,65,75,82,92,96,104,105,106,107,],[7,20,7,7,20,20,7,7,20,20,7,20,7,7,20,20,]),'identifier':([3,6,8,15,16,22,25,26,27,31,40,49,50,51,52,53,57,58,59,60,61,62,63,64,65,73,75,82,92,94,95,96,104,105,106,107,],[9,9,21,30,9,30,9,30,30,9,9,30,30,30,30,30,30,9,30,30,30,30,30,30,9,30,9,9,9,30,30,9,9,9,9,9,]),'for_occured':([10,],[23,]),'repeat_occured':([12,],[25,]),'while_occured':([13,],[26,]),'if_occured':([14,],[27,]),'value':([15,22,26,27,49,50,51,52,53,57,59,60,61,62,63,64,73,94,95,],[28,36,42,42,68,69,70,71,72,42,76,77,78,79,80,81,85,97,98,]),'expression':([22,],[35,]),'condition':([26,27,57,],[41,43,74,]),'get_pidentifier':([37,],[54,]),'first_value':([85,],[91,]),'else_occured':([88,],[92,]),'second_value':([97,98,],[100,101,]),'do_occured':([102,103,],[104,105,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> DECLARE declarations BEGIN commands END','program',5,'p_program','code_parser.py',142),
  ('program -> BEGIN commands END','program',3,'p_program','code_parser.py',143),
  ('declarations -> declarations COMMA pidentifier','declarations',3,'p_declarations_muliple','code_parser.py',146),
  ('declarations -> declarations COMMA pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET','declarations',8,'p_declarations_muliple','code_parser.py',147),
  ('declarations -> pidentifier','declarations',1,'p_declarations_single_var','code_parser.py',159),
  ('declarations -> pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET','declarations',6,'p_declarations_single_tab','code_parser.py',169),
  ('commands -> commands command','commands',2,'p_commands','code_parser.py',183),
  ('commands -> command','commands',1,'p_commands','code_parser.py',184),
  ('command -> READ identifier SEMICOLON','command',3,'p_command_read','code_parser.py',187),
  ('command -> identifier ASSIGNMENT expression SEMICOLON','command',4,'p_command_assignment','code_parser.py',215),
  ('command -> FOR for_occured pidentifier get_pidentifier FROM value first_value DOWNTO value second_value DO do_occured commands ENDFOR','command',14,'p_command_for_down_to','code_parser.py',573),
  ('command -> FOR for_occured pidentifier get_pidentifier FROM value first_value TO value second_value DO do_occured commands ENDFOR','command',14,'p_command_for_from_to','code_parser.py',576),
  ('first_value -> <empty>','first_value',0,'p_command_first_value','code_parser.py',585),
  ('second_value -> <empty>','second_value',0,'p_command_second_value','code_parser.py',593),
  ('get_pidentifier -> <empty>','get_pidentifier',0,'p_command_get_pidentifier','code_parser.py',601),
  ('do_occured -> <empty>','do_occured',0,'p_command_do_occured','code_parser.py',610),
  ('for_occured -> <empty>','for_occured',0,'p_command_for_occured','code_parser.py',776),
  ('command -> REPEAT repeat_occured commands UNTIL condition SEMICOLON','command',6,'p_command_repeat_until','code_parser.py',784),
  ('repeat_occured -> <empty>','repeat_occured',0,'p_command_repeat_occured','code_parser.py',794),
  ('command -> WHILE while_occured condition DO commands ENDWHILE','command',6,'p_command_while','code_parser.py',803),
  ('while_occured -> <empty>','while_occured',0,'p_command_while_occured','code_parser.py',813),
  ('command -> IF if_occured condition THEN commands ELSE else_occured commands ENDIF','command',9,'p_command_if_else','code_parser.py',822),
  ('else_occured -> <empty>','else_occured',0,'p_command_else_occured','code_parser.py',836),
  ('command -> IF if_occured condition THEN commands ENDIF','command',6,'p_command_if_endif','code_parser.py',849),
  ('if_occured -> <empty>','if_occured',0,'p_if_occured','code_parser.py',863),
  ('command -> WRITE value SEMICOLON','command',3,'p_command_write','code_parser.py',869),
  ('expression -> value','expression',1,'p_expression_val','code_parser.py',907),
  ('expression -> value ADD value','expression',3,'p_expression_math','code_parser.py',911),
  ('expression -> value SUB value','expression',3,'p_expression_math','code_parser.py',912),
  ('expression -> value MUL value','expression',3,'p_expression_math','code_parser.py',913),
  ('expression -> value DIV value','expression',3,'p_expression_math','code_parser.py',914),
  ('expression -> value MOD value','expression',3,'p_expression_math','code_parser.py',915),
  ('condition -> value EQUALS value','condition',3,'p_condition','code_parser.py',1010),
  ('condition -> value NOT_EQUALS value','condition',3,'p_condition','code_parser.py',1011),
  ('condition -> value LOWER value','condition',3,'p_condition','code_parser.py',1012),
  ('condition -> value GREATER value','condition',3,'p_condition','code_parser.py',1013),
  ('condition -> value LEQ value','condition',3,'p_condition','code_parser.py',1014),
  ('condition -> value GEQ value','condition',3,'p_condition','code_parser.py',1015),
  ('value -> NUM','value',1,'p_value_num','code_parser.py',1347),
  ('value -> identifier','value',1,'p_value_identifier','code_parser.py',1351),
  ('identifier -> pidentifier','identifier',1,'p_identifier','code_parser.py',1355),
  ('identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET','identifier',4,'p_identifier','code_parser.py',1356),
  ('identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET','identifier',4,'p_identifier_tab','code_parser.py',1371),
]
