
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftADDSUBleftMULDIVMODADD ASSIGNMENT BEGIN COLON COMMA DECLARE DIV DO DOWNTO ELSE END ENDFOR ENDIF ENDWHILE EQUALS FOR FROM GEQ GREATER IF LEFT_BRACKET LEQ LOWER MOD MUL NOT_EQUALS NUM READ REPEAT RIGHT_BRACKET SEMICOLON SUB THEN TO UNTIL WHILE WRITE pidentifierprogram : DECLARE declarations BEGIN commands END\n               | BEGIN commands ENDdeclarations : declarations COMMA pidentifier\n                    | declarations COMMA pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKETdeclarations : pidentifierdeclarations : pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKETcommands : commands command\n                | commandcommand : READ identifier SEMICOLONcommand : identifier ASSIGNMENT expression SEMICOLONcommand : WHILE  condition  DO  commands  ENDWHILE\n               | REPEAT  commands  UNTIL  condition SEMICOLON\n               | FOR  pidentifier  FROM  value TO  value DO  commands  ENDFOR\n               | FOR  pidentifier  FROM  value  DOWNTO  value DO  commands  ENDFORcommand : IF if_occured condition THEN commands ELSE else_occured commands ENDIFelse_occured :command : IF if_occured condition  THEN  commands  ENDIFif_occured :command : WRITE value SEMICOLONexpression : valueexpression : value ADD value\n                  | value SUB value\n                  | value MUL value\n                  | value DIV value\n                  | value MOD valuecondition : value EQUALS value\n                 | value NOT_EQUALS value\n                 | value LOWER value\n                 | value GREATER value\n                 | value LEQ value\n                 | value GEQ valuevalue : NUMvalue : identifieridentifier : pidentifier\n                  | pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKETidentifier : pidentifier LEFT_BRACKET NUM RIGHT_BRACKET'
    
_lr_action_items = {'DECLARE':([0,],[2,]),'BEGIN':([0,4,5,33,85,94,],[3,16,-5,-3,-6,-4,]),'$end':([1,19,51,],[0,-2,-1,]),'pidentifier':([2,3,6,7,8,10,11,12,14,15,16,17,20,22,27,29,30,32,35,38,39,40,41,42,43,44,45,46,50,54,55,56,57,58,59,60,71,79,80,81,82,83,88,89,91,92,93,95,96,97,98,99,100,],[5,13,13,-8,13,13,13,28,-18,13,13,33,-7,13,13,47,13,13,-9,13,13,13,13,13,13,13,13,13,-19,-10,13,13,13,13,13,13,13,-11,-12,13,13,13,-16,-17,13,13,13,13,13,13,-13,-14,-15,]),'READ':([3,6,7,11,16,20,27,32,35,38,50,54,60,71,79,80,83,88,89,91,92,93,95,96,97,98,99,100,],[8,8,-8,8,8,-7,8,8,-9,8,-19,-10,8,8,-11,-12,8,-16,-17,8,8,8,8,8,8,-13,-14,-15,]),'WHILE':([3,6,7,11,16,20,27,32,35,38,50,54,60,71,79,80,83,88,89,91,92,93,95,96,97,98,99,100,],[10,10,-8,10,10,-7,10,10,-9,10,-19,-10,10,10,-11,-12,10,-16,-17,10,10,10,10,10,10,-13,-14,-15,]),'REPEAT':([3,6,7,11,16,20,27,32,35,38,50,54,60,71,79,80,83,88,89,91,92,93,95,96,97,98,99,100,],[11,11,-8,11,11,-7,11,11,-9,11,-19,-10,11,11,-11,-12,11,-16,-17,11,11,11,11,11,11,-13,-14,-15,]),'FOR':([3,6,7,11,16,20,27,32,35,38,50,54,60,71,79,80,83,88,89,91,92,93,95,96,97,98,99,100,],[12,12,-8,12,12,-7,12,12,-9,12,-19,-10,12,12,-11,-12,12,-16,-17,12,12,12,12,12,12,-13,-14,-15,]),'IF':([3,6,7,11,16,20,27,32,35,38,50,54,60,71,79,80,83,88,89,91,92,93,95,96,97,98,99,100,],[14,14,-8,14,14,-7,14,14,-9,14,-19,-10,14,14,-11,-12,14,-16,-17,14,14,14,14,14,14,-13,-14,-15,]),'WRITE':([3,6,7,11,16,20,27,32,35,38,50,54,60,71,79,80,83,88,89,91,92,93,95,96,97,98,99,100,],[15,15,-8,15,15,-7,15,15,-9,15,-19,-10,15,15,-11,-12,15,-16,-17,15,15,15,15,15,15,-13,-14,-15,]),'COMMA':([4,5,33,85,94,],[17,-5,-3,-6,-4,]),'LEFT_BRACKET':([5,13,33,],[18,29,52,]),'END':([6,7,20,32,35,50,54,79,80,89,98,99,100,],[19,-8,-7,51,-9,-19,-10,-11,-12,-17,-13,-14,-15,]),'UNTIL':([7,20,27,35,50,54,79,80,89,98,99,100,],[-8,-7,45,-9,-19,-10,-11,-12,-17,-13,-14,-15,]),'ENDWHILE':([7,20,35,50,54,60,79,80,89,98,99,100,],[-8,-7,-9,-19,-10,79,-11,-12,-17,-13,-14,-15,]),'ELSE':([7,20,35,50,54,79,80,83,89,98,99,100,],[-8,-7,-9,-19,-10,-11,-12,88,-17,-13,-14,-15,]),'ENDIF':([7,20,35,50,54,79,80,83,89,97,98,99,100,],[-8,-7,-9,-19,-10,-11,-12,89,-17,100,-13,-14,-15,]),'ENDFOR':([7,20,35,50,54,79,80,89,95,96,98,99,100,],[-8,-7,-9,-19,-10,-11,-12,-17,98,99,-13,-14,-15,]),'ASSIGNMENT':([9,13,69,70,],[22,-34,-35,-36,]),'NUM':([10,14,15,18,22,29,30,39,40,41,42,43,44,45,46,52,53,55,56,57,58,59,81,82,84,],[25,-18,25,34,25,48,25,25,25,25,25,25,25,25,25,72,73,25,25,25,25,25,25,25,90,]),'SEMICOLON':([13,21,25,26,31,36,37,61,62,63,64,65,66,67,69,70,74,75,76,77,78,],[-34,35,-32,-33,50,54,-20,-26,-27,-28,-29,-30,-31,80,-35,-36,-21,-22,-23,-24,-25,]),'EQUALS':([13,24,25,26,69,70,],[-34,39,-32,-33,-35,-36,]),'NOT_EQUALS':([13,24,25,26,69,70,],[-34,40,-32,-33,-35,-36,]),'LOWER':([13,24,25,26,69,70,],[-34,41,-32,-33,-35,-36,]),'GREATER':([13,24,25,26,69,70,],[-34,42,-32,-33,-35,-36,]),'LEQ':([13,24,25,26,69,70,],[-34,43,-32,-33,-35,-36,]),'GEQ':([13,24,25,26,69,70,],[-34,44,-32,-33,-35,-36,]),'ADD':([13,25,26,37,69,70,],[-34,-32,-33,55,-35,-36,]),'SUB':([13,25,26,37,69,70,],[-34,-32,-33,56,-35,-36,]),'MUL':([13,25,26,37,69,70,],[-34,-32,-33,57,-35,-36,]),'DIV':([13,25,26,37,69,70,],[-34,-32,-33,58,-35,-36,]),'MOD':([13,25,26,37,69,70,],[-34,-32,-33,59,-35,-36,]),'DO':([13,23,25,26,61,62,63,64,65,66,69,70,86,87,],[-34,38,-32,-33,-26,-27,-28,-29,-30,-31,-35,-36,91,92,]),'THEN':([13,25,26,49,61,62,63,64,65,66,69,70,],[-34,-32,-33,71,-26,-27,-28,-29,-30,-31,-35,-36,]),'TO':([13,25,26,68,69,70,],[-34,-32,-33,81,-35,-36,]),'DOWNTO':([13,25,26,68,69,70,],[-34,-32,-33,82,-35,-36,]),'FROM':([28,],[46,]),'COLON':([34,72,],[53,84,]),'RIGHT_BRACKET':([47,48,73,90,],[69,70,85,94,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([2,],[4,]),'commands':([3,11,16,38,71,91,92,93,],[6,27,32,60,83,95,96,97,]),'command':([3,6,11,16,27,32,38,60,71,83,91,92,93,95,96,97,],[7,20,7,7,20,20,7,20,7,20,7,7,7,20,20,20,]),'identifier':([3,6,8,10,11,15,16,22,27,30,32,38,39,40,41,42,43,44,45,46,55,56,57,58,59,60,71,81,82,83,91,92,93,95,96,97,],[9,9,21,26,9,26,9,26,9,26,9,9,26,26,26,26,26,26,26,26,26,26,26,26,26,9,9,26,26,9,9,9,9,9,9,9,]),'condition':([10,30,45,],[23,49,67,]),'value':([10,15,22,30,39,40,41,42,43,44,45,46,55,56,57,58,59,81,82,],[24,31,37,24,61,62,63,64,65,66,24,68,74,75,76,77,78,86,87,]),'if_occured':([14,],[30,]),'expression':([22,],[36,]),'else_occured':([88,],[93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> DECLARE declarations BEGIN commands END','program',5,'p_program','code_parser.py',127),
  ('program -> BEGIN commands END','program',3,'p_program','code_parser.py',128),
  ('declarations -> declarations COMMA pidentifier','declarations',3,'p_declarations_muliple','code_parser.py',131),
  ('declarations -> declarations COMMA pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET','declarations',8,'p_declarations_muliple','code_parser.py',132),
  ('declarations -> pidentifier','declarations',1,'p_declarations_single_var','code_parser.py',144),
  ('declarations -> pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET','declarations',6,'p_declarations_single_tab','code_parser.py',154),
  ('commands -> commands command','commands',2,'p_commands','code_parser.py',168),
  ('commands -> command','commands',1,'p_commands','code_parser.py',169),
  ('command -> READ identifier SEMICOLON','command',3,'p_command_read','code_parser.py',172),
  ('command -> identifier ASSIGNMENT expression SEMICOLON','command',4,'p_command_assignment','code_parser.py',197),
  ('command -> WHILE condition DO commands ENDWHILE','command',5,'p_command_all','code_parser.py',521),
  ('command -> REPEAT commands UNTIL condition SEMICOLON','command',5,'p_command_all','code_parser.py',522),
  ('command -> FOR pidentifier FROM value TO value DO commands ENDFOR','command',9,'p_command_all','code_parser.py',523),
  ('command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR','command',9,'p_command_all','code_parser.py',524),
  ('command -> IF if_occured condition THEN commands ELSE else_occured commands ENDIF','command',9,'p_command_if_else','code_parser.py',527),
  ('else_occured -> <empty>','else_occured',0,'p_command_else_occured','code_parser.py',537),
  ('command -> IF if_occured condition THEN commands ENDIF','command',6,'p_command_if_endif','code_parser.py',545),
  ('if_occured -> <empty>','if_occured',0,'p_if_occured','code_parser.py',554),
  ('command -> WRITE value SEMICOLON','command',3,'p_command_write','code_parser.py',560),
  ('expression -> value','expression',1,'p_expression_val','code_parser.py',593),
  ('expression -> value ADD value','expression',3,'p_expression_math','code_parser.py',597),
  ('expression -> value SUB value','expression',3,'p_expression_math','code_parser.py',598),
  ('expression -> value MUL value','expression',3,'p_expression_math','code_parser.py',599),
  ('expression -> value DIV value','expression',3,'p_expression_math','code_parser.py',600),
  ('expression -> value MOD value','expression',3,'p_expression_math','code_parser.py',601),
  ('condition -> value EQUALS value','condition',3,'p_condition','code_parser.py',682),
  ('condition -> value NOT_EQUALS value','condition',3,'p_condition','code_parser.py',683),
  ('condition -> value LOWER value','condition',3,'p_condition','code_parser.py',684),
  ('condition -> value GREATER value','condition',3,'p_condition','code_parser.py',685),
  ('condition -> value LEQ value','condition',3,'p_condition','code_parser.py',686),
  ('condition -> value GEQ value','condition',3,'p_condition','code_parser.py',687),
  ('value -> NUM','value',1,'p_value_num','code_parser.py',940),
  ('value -> identifier','value',1,'p_value_identifier','code_parser.py',944),
  ('identifier -> pidentifier','identifier',1,'p_identifier','code_parser.py',948),
  ('identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET','identifier',4,'p_identifier','code_parser.py',949),
  ('identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET','identifier',4,'p_identifier_tab','code_parser.py',961),
]
