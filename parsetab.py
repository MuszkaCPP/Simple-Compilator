
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftADDSUBleftMULDIVMODADD ASSIGNMENT BEGIN COLON COMMA DECLARE DIV DO DOWNTO ELSE END ENDFOR ENDIF ENDWHILE EQUALS FOR FROM GEQ GREATER IF LEFT_BRACKET LEQ LOWER MOD MUL NOT_EQUALS NUM READ REPEAT RIGHT_BRACKET SEMICOLON SUB THEN TO UNTIL WHILE WRITE pidentifierprogram : DECLARE declarations BEGIN commands END\n               | BEGIN commands ENDdeclarations : declarations COMMA pidentifier\n                    | declarations COMMA pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKETdeclarations : pidentifierdeclarations : pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKETcommands : commands command\n                | commandcommand : READ identifier SEMICOLONcommand : identifier ASSIGNMENT expression SEMICOLONcommand : WHILE  condition  DO  commands  ENDWHILE\n               | REPEAT  commands  UNTIL  condition SEMICOLON\n               | FOR  pidentifier  FROM  value TO  value DO  commands  ENDFOR\n               | FOR  pidentifier  FROM  value  DOWNTO  value DO  commands  ENDFORcommand : IF condition THEN commands ELSE commands ENDIF\n               | IF  condition  THEN  commands  ENDIFcommand : WRITE value SEMICOLONexpression : valueexpression : value ADD value\n                  | value SUB value\n                  | value MUL value\n                  | value DIV value\n                  | value MOD valuecondition : value EQUALS value\n                 | value NOT_EQUALS value\n                 | value LOWER value\n                 | value GREATER value\n                 | value LEQ value\n                 | value GEQ valuevalue : NUMvalue : identifieridentifier : pidentifier\n                  | pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKETidentifier : pidentifier LEFT_BRACKET NUM RIGHT_BRACKET'
    
_lr_action_items = {'DECLARE':([0,],[2,]),'BEGIN':([0,4,5,33,86,94,],[3,16,-5,-3,-6,-4,]),'$end':([1,19,51,],[0,-2,-1,]),'pidentifier':([2,3,6,7,8,10,11,12,14,15,16,17,20,22,27,29,32,35,38,39,40,41,42,43,44,45,46,49,50,54,55,56,57,58,59,60,71,79,80,81,82,83,84,89,91,92,93,95,96,97,98,],[5,13,13,-8,13,13,13,28,13,13,13,33,-7,13,13,47,13,-9,13,13,13,13,13,13,13,13,13,13,-17,-10,13,13,13,13,13,13,13,-11,-12,13,13,13,-16,13,13,13,-15,13,13,-13,-14,]),'READ':([3,6,7,11,16,20,27,32,35,38,49,50,54,60,71,79,80,83,84,89,91,92,93,95,96,97,98,],[8,8,-8,8,8,-7,8,8,-9,8,8,-17,-10,8,8,-11,-12,8,-16,8,8,8,-15,8,8,-13,-14,]),'WHILE':([3,6,7,11,16,20,27,32,35,38,49,50,54,60,71,79,80,83,84,89,91,92,93,95,96,97,98,],[10,10,-8,10,10,-7,10,10,-9,10,10,-17,-10,10,10,-11,-12,10,-16,10,10,10,-15,10,10,-13,-14,]),'REPEAT':([3,6,7,11,16,20,27,32,35,38,49,50,54,60,71,79,80,83,84,89,91,92,93,95,96,97,98,],[11,11,-8,11,11,-7,11,11,-9,11,11,-17,-10,11,11,-11,-12,11,-16,11,11,11,-15,11,11,-13,-14,]),'FOR':([3,6,7,11,16,20,27,32,35,38,49,50,54,60,71,79,80,83,84,89,91,92,93,95,96,97,98,],[12,12,-8,12,12,-7,12,12,-9,12,12,-17,-10,12,12,-11,-12,12,-16,12,12,12,-15,12,12,-13,-14,]),'IF':([3,6,7,11,16,20,27,32,35,38,49,50,54,60,71,79,80,83,84,89,91,92,93,95,96,97,98,],[14,14,-8,14,14,-7,14,14,-9,14,14,-17,-10,14,14,-11,-12,14,-16,14,14,14,-15,14,14,-13,-14,]),'WRITE':([3,6,7,11,16,20,27,32,35,38,49,50,54,60,71,79,80,83,84,89,91,92,93,95,96,97,98,],[15,15,-8,15,15,-7,15,15,-9,15,15,-17,-10,15,15,-11,-12,15,-16,15,15,15,-15,15,15,-13,-14,]),'COMMA':([4,5,33,86,94,],[17,-5,-3,-6,-4,]),'LEFT_BRACKET':([5,13,33,],[18,29,52,]),'END':([6,7,20,32,35,50,54,79,80,84,93,97,98,],[19,-8,-7,51,-9,-17,-10,-11,-12,-16,-15,-13,-14,]),'UNTIL':([7,20,27,35,50,54,79,80,84,93,97,98,],[-8,-7,45,-9,-17,-10,-11,-12,-16,-15,-13,-14,]),'ENDWHILE':([7,20,35,50,54,60,79,80,84,93,97,98,],[-8,-7,-9,-17,-10,79,-11,-12,-16,-15,-13,-14,]),'ELSE':([7,20,35,50,54,71,79,80,84,93,97,98,],[-8,-7,-9,-17,-10,83,-11,-12,-16,-15,-13,-14,]),'ENDIF':([7,20,35,50,54,71,79,80,84,89,93,97,98,],[-8,-7,-9,-17,-10,84,-11,-12,-16,93,-15,-13,-14,]),'ENDFOR':([7,20,35,50,54,79,80,84,93,95,96,97,98,],[-8,-7,-9,-17,-10,-11,-12,-16,-15,97,98,-13,-14,]),'ASSIGNMENT':([9,13,69,70,],[22,-32,-33,-34,]),'NUM':([10,14,15,18,22,29,39,40,41,42,43,44,45,46,52,53,55,56,57,58,59,81,82,85,],[25,25,25,34,25,48,25,25,25,25,25,25,25,25,72,73,25,25,25,25,25,25,25,90,]),'SEMICOLON':([13,21,25,26,31,36,37,61,62,63,64,65,66,67,69,70,74,75,76,77,78,],[-32,35,-30,-31,50,54,-18,-24,-25,-26,-27,-28,-29,80,-33,-34,-19,-20,-21,-22,-23,]),'EQUALS':([13,24,25,26,69,70,],[-32,39,-30,-31,-33,-34,]),'NOT_EQUALS':([13,24,25,26,69,70,],[-32,40,-30,-31,-33,-34,]),'LOWER':([13,24,25,26,69,70,],[-32,41,-30,-31,-33,-34,]),'GREATER':([13,24,25,26,69,70,],[-32,42,-30,-31,-33,-34,]),'LEQ':([13,24,25,26,69,70,],[-32,43,-30,-31,-33,-34,]),'GEQ':([13,24,25,26,69,70,],[-32,44,-30,-31,-33,-34,]),'ADD':([13,25,26,37,69,70,],[-32,-30,-31,55,-33,-34,]),'SUB':([13,25,26,37,69,70,],[-32,-30,-31,56,-33,-34,]),'MUL':([13,25,26,37,69,70,],[-32,-30,-31,57,-33,-34,]),'DIV':([13,25,26,37,69,70,],[-32,-30,-31,58,-33,-34,]),'MOD':([13,25,26,37,69,70,],[-32,-30,-31,59,-33,-34,]),'DO':([13,23,25,26,61,62,63,64,65,66,69,70,87,88,],[-32,38,-30,-31,-24,-25,-26,-27,-28,-29,-33,-34,91,92,]),'THEN':([13,25,26,30,61,62,63,64,65,66,69,70,],[-32,-30,-31,49,-24,-25,-26,-27,-28,-29,-33,-34,]),'TO':([13,25,26,68,69,70,],[-32,-30,-31,81,-33,-34,]),'DOWNTO':([13,25,26,68,69,70,],[-32,-30,-31,82,-33,-34,]),'FROM':([28,],[46,]),'COLON':([34,72,],[53,85,]),'RIGHT_BRACKET':([47,48,73,90,],[69,70,86,94,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([2,],[4,]),'commands':([3,11,16,38,49,83,91,92,],[6,27,32,60,71,89,95,96,]),'command':([3,6,11,16,27,32,38,49,60,71,83,89,91,92,95,96,],[7,20,7,7,20,20,7,7,20,20,7,20,7,7,20,20,]),'identifier':([3,6,8,10,11,14,15,16,22,27,32,38,39,40,41,42,43,44,45,46,49,55,56,57,58,59,60,71,81,82,83,89,91,92,95,96,],[9,9,21,26,9,26,26,9,26,9,9,9,26,26,26,26,26,26,26,26,9,26,26,26,26,26,9,9,26,26,9,9,9,9,9,9,]),'condition':([10,14,45,],[23,30,67,]),'value':([10,14,15,22,39,40,41,42,43,44,45,46,55,56,57,58,59,81,82,],[24,24,31,37,61,62,63,64,65,66,24,68,74,75,76,77,78,87,88,]),'expression':([22,],[36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> DECLARE declarations BEGIN commands END','program',5,'p_program','code_parser.py',126),
  ('program -> BEGIN commands END','program',3,'p_program','code_parser.py',127),
  ('declarations -> declarations COMMA pidentifier','declarations',3,'p_declarations_muliple','code_parser.py',130),
  ('declarations -> declarations COMMA pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET','declarations',8,'p_declarations_muliple','code_parser.py',131),
  ('declarations -> pidentifier','declarations',1,'p_declarations_single_var','code_parser.py',143),
  ('declarations -> pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET','declarations',6,'p_declarations_single_tab','code_parser.py',153),
  ('commands -> commands command','commands',2,'p_commands','code_parser.py',167),
  ('commands -> command','commands',1,'p_commands','code_parser.py',168),
  ('command -> READ identifier SEMICOLON','command',3,'p_command_read','code_parser.py',171),
  ('command -> identifier ASSIGNMENT expression SEMICOLON','command',4,'p_command_assignment','code_parser.py',193),
  ('command -> WHILE condition DO commands ENDWHILE','command',5,'p_command_all','code_parser.py',376),
  ('command -> REPEAT commands UNTIL condition SEMICOLON','command',5,'p_command_all','code_parser.py',377),
  ('command -> FOR pidentifier FROM value TO value DO commands ENDFOR','command',9,'p_command_all','code_parser.py',378),
  ('command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR','command',9,'p_command_all','code_parser.py',379),
  ('command -> IF condition THEN commands ELSE commands ENDIF','command',7,'p_command_if','code_parser.py',382),
  ('command -> IF condition THEN commands ENDIF','command',5,'p_command_if','code_parser.py',383),
  ('command -> WRITE value SEMICOLON','command',3,'p_command_write','code_parser.py',386),
  ('expression -> value','expression',1,'p_expression_val','code_parser.py',416),
  ('expression -> value ADD value','expression',3,'p_expression_math','code_parser.py',420),
  ('expression -> value SUB value','expression',3,'p_expression_math','code_parser.py',421),
  ('expression -> value MUL value','expression',3,'p_expression_math','code_parser.py',422),
  ('expression -> value DIV value','expression',3,'p_expression_math','code_parser.py',423),
  ('expression -> value MOD value','expression',3,'p_expression_math','code_parser.py',424),
  ('condition -> value EQUALS value','condition',3,'p_condition','code_parser.py',486),
  ('condition -> value NOT_EQUALS value','condition',3,'p_condition','code_parser.py',487),
  ('condition -> value LOWER value','condition',3,'p_condition','code_parser.py',488),
  ('condition -> value GREATER value','condition',3,'p_condition','code_parser.py',489),
  ('condition -> value LEQ value','condition',3,'p_condition','code_parser.py',490),
  ('condition -> value GEQ value','condition',3,'p_condition','code_parser.py',491),
  ('value -> NUM','value',1,'p_value_num','code_parser.py',525),
  ('value -> identifier','value',1,'p_value_identifier','code_parser.py',529),
  ('identifier -> pidentifier','identifier',1,'p_identifier','code_parser.py',533),
  ('identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET','identifier',4,'p_identifier','code_parser.py',534),
  ('identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET','identifier',4,'p_identifier_tab','code_parser.py',545),
]
