
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftADDSUBleftMULDIVMODADD ASSIGNMENT BEGIN COLON COMMA DECLARE DIV DO DOWNTO ELSE END ENDFOR ENDIF ENDWHILE EQUALS FOR FROM GEQ GREATER IF LEFT_BRACKET LEQ LOWER MOD MUL NOT_EQUALS NUM READ REPEAT RIGHT_BRACKET SEMICOLON SUB THEN TO UNTIL WHILE WRITE pidentifierprogram : DECLARE declarations BEGIN commands END\n               | BEGIN commands ENDdeclarations : declarations COMMA pidentifier\n                    | declarations COMMA pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKETdeclarations : pidentifierdeclarations : pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKETcommands : commands command\n                | commandcommand : READ identifier SEMICOLONcommand : identifier ASSIGNMENT expression SEMICOLONcommand : FOR  pidentifier  FROM  value  DOWNTO  value DO  commands  ENDFORcommand : FOR  pidentifier  FROM  value TO  value DO  commands  ENDFORcommand : REPEAT repeat_occured  commands  UNTIL  condition SEMICOLONrepeat_occured :command : WHILE while_occured condition  DO  commands  ENDWHILEwhile_occured :command : IF if_occured condition THEN commands ELSE else_occured commands ENDIFelse_occured :command : IF if_occured condition  THEN  commands  ENDIFif_occured :command : WRITE value SEMICOLONexpression : valueexpression : value ADD value\n                  | value SUB value\n                  | value MUL value\n                  | value DIV value\n                  | value MOD valuecondition : value EQUALS value\n                 | value NOT_EQUALS value\n                 | value LOWER value\n                 | value GREATER value\n                 | value LEQ value\n                 | value GEQ valuevalue : NUMvalue : identifieridentifier : pidentifier\n                  | pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKETidentifier : pidentifier LEFT_BRACKET NUM RIGHT_BRACKET'
    
_lr_action_items = {'DECLARE':([0,],[2,]),'BEGIN':([0,4,5,32,85,96,],[3,16,-5,-3,-6,-4,]),'$end':([1,19,45,],[0,-2,-1,]),'pidentifier':([2,3,6,7,8,10,12,13,14,15,16,17,20,22,24,25,26,27,31,34,37,40,44,48,49,50,51,52,53,57,58,59,60,61,62,63,64,65,73,74,76,83,88,89,90,91,93,94,95,97,98,99,100,101,102,],[5,11,11,-8,11,23,-14,-16,-20,11,11,32,-7,11,38,11,11,11,11,-9,11,11,-21,-10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-13,-15,-18,-19,11,11,11,11,11,11,-11,-12,-17,]),'READ':([3,6,7,12,16,20,25,31,34,40,44,48,58,65,76,83,88,89,90,91,93,94,95,97,98,99,100,101,102,],[8,8,-8,-14,8,-7,8,8,-9,8,-21,-10,8,8,8,8,-13,-15,-18,-19,8,8,8,8,8,8,-11,-12,-17,]),'FOR':([3,6,7,12,16,20,25,31,34,40,44,48,58,65,76,83,88,89,90,91,93,94,95,97,98,99,100,101,102,],[10,10,-8,-14,10,-7,10,10,-9,10,-21,-10,10,10,10,10,-13,-15,-18,-19,10,10,10,10,10,10,-11,-12,-17,]),'REPEAT':([3,6,7,12,16,20,25,31,34,40,44,48,58,65,76,83,88,89,90,91,93,94,95,97,98,99,100,101,102,],[12,12,-8,-14,12,-7,12,12,-9,12,-21,-10,12,12,12,12,-13,-15,-18,-19,12,12,12,12,12,12,-11,-12,-17,]),'WHILE':([3,6,7,12,16,20,25,31,34,40,44,48,58,65,76,83,88,89,90,91,93,94,95,97,98,99,100,101,102,],[13,13,-8,-14,13,-7,13,13,-9,13,-21,-10,13,13,13,13,-13,-15,-18,-19,13,13,13,13,13,13,-11,-12,-17,]),'IF':([3,6,7,12,16,20,25,31,34,40,44,48,58,65,76,83,88,89,90,91,93,94,95,97,98,99,100,101,102,],[14,14,-8,-14,14,-7,14,14,-9,14,-21,-10,14,14,14,14,-13,-15,-18,-19,14,14,14,14,14,14,-11,-12,-17,]),'WRITE':([3,6,7,12,16,20,25,31,34,40,44,48,58,65,76,83,88,89,90,91,93,94,95,97,98,99,100,101,102,],[15,15,-8,-14,15,-7,15,15,-9,15,-21,-10,15,15,15,15,-13,-15,-18,-19,15,15,15,15,15,15,-11,-12,-17,]),'COMMA':([4,5,32,85,96,],[17,-5,-3,-6,-4,]),'LEFT_BRACKET':([5,11,32,],[18,24,46,]),'END':([6,7,20,31,34,44,48,88,89,91,100,101,102,],[19,-8,-7,45,-9,-21,-10,-13,-15,-19,-11,-12,-17,]),'UNTIL':([7,20,34,40,44,48,88,89,91,100,101,102,],[-8,-7,-9,57,-21,-10,-13,-15,-19,-11,-12,-17,]),'ENDWHILE':([7,20,34,44,48,76,88,89,91,100,101,102,],[-8,-7,-9,-21,-10,89,-13,-15,-19,-11,-12,-17,]),'ELSE':([7,20,34,44,48,83,88,89,91,100,101,102,],[-8,-7,-9,-21,-10,90,-13,-15,-19,-11,-12,-17,]),'ENDIF':([7,20,34,44,48,83,88,89,91,99,100,101,102,],[-8,-7,-9,-21,-10,91,-13,-15,-19,102,-11,-12,-17,]),'ENDFOR':([7,20,34,44,48,88,89,91,97,98,100,101,102,],[-8,-7,-9,-21,-10,-13,-15,-19,100,101,-11,-12,-17,]),'ASSIGNMENT':([9,11,55,56,],[22,-36,-37,-38,]),'SEMICOLON':([11,21,28,29,30,35,36,55,56,68,69,70,71,72,75,77,78,79,80,81,82,],[-36,34,44,-34,-35,48,-22,-37,-38,-23,-24,-25,-26,-27,88,-28,-29,-30,-31,-32,-33,]),'ADD':([11,29,30,36,55,56,],[-36,-34,-35,49,-37,-38,]),'SUB':([11,29,30,36,55,56,],[-36,-34,-35,50,-37,-38,]),'MUL':([11,29,30,36,55,56,],[-36,-34,-35,51,-37,-38,]),'DIV':([11,29,30,36,55,56,],[-36,-34,-35,52,-37,-38,]),'MOD':([11,29,30,36,55,56,],[-36,-34,-35,53,-37,-38,]),'EQUALS':([11,29,30,42,55,56,],[-36,-34,-35,59,-37,-38,]),'NOT_EQUALS':([11,29,30,42,55,56,],[-36,-34,-35,60,-37,-38,]),'LOWER':([11,29,30,42,55,56,],[-36,-34,-35,61,-37,-38,]),'GREATER':([11,29,30,42,55,56,],[-36,-34,-35,62,-37,-38,]),'LEQ':([11,29,30,42,55,56,],[-36,-34,-35,63,-37,-38,]),'GEQ':([11,29,30,42,55,56,],[-36,-34,-35,64,-37,-38,]),'DOWNTO':([11,29,30,54,55,56,],[-36,-34,-35,73,-37,-38,]),'TO':([11,29,30,54,55,56,],[-36,-34,-35,74,-37,-38,]),'DO':([11,29,30,41,55,56,77,78,79,80,81,82,86,87,],[-36,-34,-35,58,-37,-38,-28,-29,-30,-31,-32,-33,93,94,]),'THEN':([11,29,30,43,55,56,77,78,79,80,81,82,],[-36,-34,-35,65,-37,-38,-28,-29,-30,-31,-32,-33,]),'NUM':([13,14,15,18,22,24,26,27,37,46,47,49,50,51,52,53,57,59,60,61,62,63,64,73,74,84,],[-16,-20,29,33,29,39,29,29,29,66,67,29,29,29,29,29,29,29,29,29,29,29,29,29,29,92,]),'FROM':([23,],[37,]),'COLON':([33,66,],[47,84,]),'RIGHT_BRACKET':([38,39,67,92,],[55,56,85,96,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([2,],[4,]),'commands':([3,16,25,58,65,93,94,95,],[6,31,40,76,83,97,98,99,]),'command':([3,6,16,25,31,40,58,65,76,83,93,94,95,97,98,99,],[7,20,7,7,20,20,7,7,20,20,7,7,7,20,20,20,]),'identifier':([3,6,8,15,16,22,25,26,27,31,37,40,49,50,51,52,53,57,58,59,60,61,62,63,64,65,73,74,76,83,93,94,95,97,98,99,],[9,9,21,30,9,30,9,30,30,9,30,9,30,30,30,30,30,30,9,30,30,30,30,30,30,9,30,30,9,9,9,9,9,9,9,9,]),'repeat_occured':([12,],[25,]),'while_occured':([13,],[26,]),'if_occured':([14,],[27,]),'value':([15,22,26,27,37,49,50,51,52,53,57,59,60,61,62,63,64,73,74,],[28,36,42,42,54,68,69,70,71,72,42,77,78,79,80,81,82,86,87,]),'expression':([22,],[35,]),'condition':([26,27,57,],[41,43,75,]),'else_occured':([90,],[95,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> DECLARE declarations BEGIN commands END','program',5,'p_program','code_parser.py',127),
  ('program -> BEGIN commands END','program',3,'p_program','code_parser.py',128),
  ('declarations -> declarations COMMA pidentifier','declarations',3,'p_declarations_muliple','code_parser.py',131),
  ('declarations -> declarations COMMA pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET','declarations',8,'p_declarations_muliple','code_parser.py',132),
  ('declarations -> pidentifier','declarations',1,'p_declarations_single_var','code_parser.py',144),
  ('declarations -> pidentifier LEFT_BRACKET NUM COLON NUM RIGHT_BRACKET','declarations',6,'p_declarations_single_tab','code_parser.py',154),
  ('commands -> commands command','commands',2,'p_commands','code_parser.py',168),
  ('commands -> command','commands',1,'p_commands','code_parser.py',169),
  ('command -> READ identifier SEMICOLON','command',3,'p_command_read','code_parser.py',172),
  ('command -> identifier ASSIGNMENT expression SEMICOLON','command',4,'p_command_assignment','code_parser.py',200),
  ('command -> FOR pidentifier FROM value DOWNTO value DO commands ENDFOR','command',9,'p_command_for_down_to','code_parser.py',527),
  ('command -> FOR pidentifier FROM value TO value DO commands ENDFOR','command',9,'p_command_for_from_to','code_parser.py',530),
  ('command -> REPEAT repeat_occured commands UNTIL condition SEMICOLON','command',6,'p_command_repeat_until','code_parser.py',533),
  ('repeat_occured -> <empty>','repeat_occured',0,'p_command_repeat_occured','code_parser.py',540),
  ('command -> WHILE while_occured condition DO commands ENDWHILE','command',6,'p_command_while','code_parser.py',549),
  ('while_occured -> <empty>','while_occured',0,'p_command_while_occured','code_parser.py',559),
  ('command -> IF if_occured condition THEN commands ELSE else_occured commands ENDIF','command',9,'p_command_if_else','code_parser.py',568),
  ('else_occured -> <empty>','else_occured',0,'p_command_else_occured','code_parser.py',582),
  ('command -> IF if_occured condition THEN commands ENDIF','command',6,'p_command_if_endif','code_parser.py',595),
  ('if_occured -> <empty>','if_occured',0,'p_if_occured','code_parser.py',609),
  ('command -> WRITE value SEMICOLON','command',3,'p_command_write','code_parser.py',615),
  ('expression -> value','expression',1,'p_expression_val','code_parser.py',652),
  ('expression -> value ADD value','expression',3,'p_expression_math','code_parser.py',656),
  ('expression -> value SUB value','expression',3,'p_expression_math','code_parser.py',657),
  ('expression -> value MUL value','expression',3,'p_expression_math','code_parser.py',658),
  ('expression -> value DIV value','expression',3,'p_expression_math','code_parser.py',659),
  ('expression -> value MOD value','expression',3,'p_expression_math','code_parser.py',660),
  ('condition -> value EQUALS value','condition',3,'p_condition','code_parser.py',745),
  ('condition -> value NOT_EQUALS value','condition',3,'p_condition','code_parser.py',746),
  ('condition -> value LOWER value','condition',3,'p_condition','code_parser.py',747),
  ('condition -> value GREATER value','condition',3,'p_condition','code_parser.py',748),
  ('condition -> value LEQ value','condition',3,'p_condition','code_parser.py',749),
  ('condition -> value GEQ value','condition',3,'p_condition','code_parser.py',750),
  ('value -> NUM','value',1,'p_value_num','code_parser.py',1061),
  ('value -> identifier','value',1,'p_value_identifier','code_parser.py',1065),
  ('identifier -> pidentifier','identifier',1,'p_identifier','code_parser.py',1069),
  ('identifier -> pidentifier LEFT_BRACKET pidentifier RIGHT_BRACKET','identifier',4,'p_identifier','code_parser.py',1070),
  ('identifier -> pidentifier LEFT_BRACKET NUM RIGHT_BRACKET','identifier',4,'p_identifier_tab','code_parser.py',1082),
]
